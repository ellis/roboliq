http://stackoverflow.com/questions/3900307/cleaner-way-to-update-nested-structures

James Meridith: API for Evoware


Evoware people:

	- how many LiHas does the robot have?
	- how to tell whether tips are fixed?
	- tip types on fixed-tip robots?
	- which carriers are on the table, how many sites they have, and which labware they accept
	- which labware is available? for any given labware, how many wells and what well volume?
	- which external devices are available
	- how to define which labware is on which external devices in a new .esc file
		- TRAC.ini
	- where are the liquid class names stored?

Big goals:
	Weizmann: first fully functional translation of example evolab script
	BSSE: program working script for CompleteYeastTransformation.esc
	Weizmann: get all basic example scripts working
	Weizmann: get commands in ALL_COMMANDS.conf working
	Evoware: connect to Evoware's API to control operation
	Get roboliq running on the Evoware machine

Current goals:
x	esc: labware on external devices
x	read in evoware config files
	nice scripts
	better generation and scoring of cleaning commands
	use evoware config files to select more things automatically

3	create database
	make database REST updatable
	maybe put a web interface on the database
	scala interface to updating a local sqlite database?
	add script line to export database after every aspirate/dispense with liquid detection
	add script line to inform a controlling program about the liquid levels
	controlling program should read in the exported data and update the database
	when creating a master mix:
		get choice of tip model to use for dispense
		figure out how much liquid needs to be in source well considering extra wasted pipetting volumes
		decide which plate model to use for mix well
		figure out how much extra liquid is required for using the mix well
		calculate how many mix wells are needed
2	handle tubes
	handle labware being pre-placed on the table (i.e., fresh plates)
1	somehow allow for specification that a liquid should not be multi-pipetted if we don't want to waste any of it
		this needs to be generalized into various pipetting methods which can be disallowed
	have compiler get liquid class information from the evoware database (extra liquid amounts, whether there is liquid detection)
	support feedback
	if we need to aspirate from a well multiple times in a row, try to ensure that there is enough liquid in the well for the final aspiration that it can be detected
	control program
	nice scripts

Feedback:
	starting example:
		loop
			request 8 new PCR wells
			unseal plate (if sealed)
			put 50ul of water into each
			loop
				add 5ul of color to each well
				ask user whether to repeat?
			while user said yes
			ask user whether to do the same for more wells
		while use said yes
		seal plates used

	analysis of above example:
		loop1:
			W'well_loop1_1: (50ul water) + loop2*(5ul color)
			L'water: -400 - extra
			L'color: -loop2*5 - extra

	execution of above example:
		step through protocol until end or feedback is required
		for the above segment of the protocol, add info to knowlegebase
		choose plates and wells; optionally allow user to override choices
		bind variables
		generate L1 tokens (including abstract tokens loops and conditions)
		pass L1 tokens to the control module, which will need to generate scripts, call them, handle loops, conditions, and some UI
		


Evoware commands:
x	asperate
x	dispense
x	wash
x	mix
	wait
	shake
x	transfer
	trash
Roboliq commands:
	filter/centrifuge
	plate (put drops on a larger plate)
Evoware interaction:
	load evoware configuration
	create program to monitor overall script progress
	send scripts to evoware
	recognize when evoware script is done
	run some command when evoware script is done
	T2_Wait: continue script after specified wait
	get data from evoware and peripherals
	user interaction (such as when doing a PCR and don't have a connected PCR machine)
User interface:
	Show user which decisions need/can be made
	Let user specify stuff
Get documentation from Tecan:
	carrier.cfg
	evoware.opt
	evoware.inf
		how can we tell whether the tips are fixed or disposable?
	*.esc: table layout format
Tuval/Yair:
	configuration files for their robots
	send them my code
	send them list of implemented RoboEase commands
	ask for PCR protocols
Roboease features which are missing:
	handling of external reagents
	output about resources used
	log
	use external scripts
Code:
	Evoware config:
		read in external template file
	PcrScript1: small tip dispense in first cycle should not be DRY contact -- need to track well state
	PcrScript1: decontamination of big tips should occur at beginning of 2nd cycle instead of after (via optimization)
	PcrScript1: why does cycle after mix decontaminate the big tips again?
	PcrScript1: why are small tips decontaminated after last cycle?
	PcrScript1: supress final wash after mix
	PcrScript1: it'd be good to premix rather than mix
	Rachel: second-to-last drop should drop all tips rather than keep some tips unnecessarily
x	Rachel: only mix after last dispense for PREPARE_LIST
	Rachel: why is UserPrompt("Take plate for PCR in RT-PCR",0,-1);" in ours but not theirs?
	Rachel: first dispense of PREPARE_LIST: ours="0C08#####000000000", theirs="0C08#1000000000000"
x	Example05: why no wash after last dispense?
x	Example05: shouldn't wash after dispensing water
	Example05: let user suppress post-clean when pipetting
	Example05: allow for premix before aspirate
	Example05: better wash intensity choices, so that the two tip blocks can be independently assigned wash intensities
x	PipetteScheduler: split items whose volume is too large for the chosen tip model
	PipetteScheduler: consider adding the concept of "tip blocks" in order to more directly handle some of the BSSE tip operations
*	PipetteScheduler: handle pre- and post-mixing
x	PipetteScheduler: use policy override for asperate too
	PipetteScheduler: also break the batch if there are both sources and destinations on separate plates? No... but sometimes it would make sense!
	RotemScript1: there are lots of errors
?	always wash/decon right after pipetting is done in order to prevent drying
	extra wash before decon in case of cells
	evoware: if the next command is not a pipetting command, move the LiHa back home
	evoware: if the next command is not a RoMa command, move the RoMa back home
?	Example05: need to mix reagents (4 times, 75% of well volume)
x	pipetting mix command: efficient use of multiple sources going to one destination
*	figure out how to add labware to the external devices (see "scalala" for an example)
	try to get documentation on the PCR machine in order to control it directly

	bug: if I set nFreeDispenseVolumeThreshold = 20 and run ExampleWorkshop, tips SHOULD be washed after WET dispense of colored fluid

	figure out how to compile external scripts conveniently (http://www.familie-kneissl.org/Members/martin/blog/reflection-from-scala-heaven-and-hell)
	allow for composition and chaining of protocols
	create a few interfaces: RobotModel (i.e. Evoware, Hamilton), Lab (has a RobotModel, a compiler, ...)
	create roboliq-C-weizmann and move relevant files from roboease-evoware there
	better organization of the objects needed for a given lab to compile commands or roboease:
		RoboliqSystem:
			devices
			processors
		EvowarePartModels should be loaded at startup
		Evoware table variables need to be created before customization
		EvowareTable needs to be created too, but not until translation
		EvowareSettings contains other info (e.g. wash programs) required for translation
		EvowareSystem contains all of the above, and:
			def createTranslator()
		BsseSystem:
			our devices, processors, models, table vars, table, settings, evoware translator
	compiler: make batching a part of processing L2 or L1 commands rather than performing the batching in L3
	protocol: let user create wells, not just plates?
	protocol: let user work with well groups; this is more general than wells and plates?
	protocol: let user specify specific wells on a plate?
	evoware: create EvowareCompiler.compile()
	evoware: move to roboliq.robots.evoware package
	evoware: replace Site with SiteObj (but rename SiteObj to Site)
	bsse: move to robloiq.labs.bsse package
*	devices: final wash in Pipette isn't happening because the tip states are set as clean, for some reason
*	devices: Example02: why are 1000ul being aspirated?
4	devices: implement transfer
		create means for user to capture plate location in the protocol and then use that position as an argument later (like to return a plate to an original position)
5	devices: implement wait
6	devices: implement shaker
7	devices: Pipette/Mix: add L4 option to first move the target plates to new locations, in case they cannot be accessed in their current locations
		add function to device for determining whether a given location can be accessed by the device
		add function to device for determining whether a given plate can be used by the device, and if not, which plate to transfer the contents to
		also, in plate setup, if plate's type hasn't been fixed yet, indicate which plate types are compatible with this device
	devices: replace PipetteDevice.areTipsDisposable with a flag in TipConfig?
	devices: PipetteDevice: return error message when we can't return a PipettePolicy
	devices: add bTipPermanent to Tip or TipConfig
	devices: PipettePolicy: rework this concept
		I don't really like the fact that we need to choose the Evoware liquid class in the L3 processor already...
		-- is there a good way to delay this to the EvowareTranslator?
		-- the problem is that we already need to know in L3 whether the tips will contact the destination liquid.
		PipettePolicy will also need to know the tip type; then EvowareMapper can decide on it's liquid class based on the parameters of PipettePolicy
*	devices: L3P_Wash: use extra wash volume
	devices: L3P_Pipette: drop tip after last use instead of waiting until end of pipetting
	devices: L3P_Pipette: don't match tips to dests at the beginning: delay the pairing until tip state is known in order to prefer tips with less volume
		From our translation of Rotem_Script01.conf:
		Aspirate(127,"PIE_AUT","900","900","600","300","300","300","300",0,0,0,0,0,41,2,1,"0608¯000000",0,0);
		Dispense(7,"PIE_AUTAIR","300","300","300",0,0,0,0,0,0,0,0,0,29,1,1,"0C080000 000000000",0,0);
		Dispense(3,"PIE_AUTAIR","300","300",0,0,0,0,0,0,0,0,0,0,29,2,1,"0C080000000000000",0,0);
		Dispense(127,"PIE_AUTAIR","300","300","300","300","300","300","300",0,0,0,0,0,29,2,1,"0C0800000000¯00000",0,0);
	devices: L3P_Pipette:
		From Rotem_Script03.conf: DIST_REAGENT2 DDW P14:A1+33 OLIGO_DDW_LIST DEFAULT TIPTYPE:1000,TIPMODE:KEEPTIP
		becomes:
		L3C_Pipette(BUF12:A1+8, Rotem_RGT2:A1+33, List(396.0, 1536.46, 1536.46, 397.5, 397.5, 397.5, 397.5, 397.5, 1683.0, 1049.4, 415.8, 1049.4, 
		396.0, 396.0, 396.0, 396.0, 396.0, 396.0, 396.0, 396.0, 396.0, 396.0, 396.0, 396.0, 396.0, 396.0, 396.0, 396.0, 396.0, 396.0, 396.0, 396.0, 396.0))
		and this following translation is of interest: 
		L2C_Aspirate(Tip1-2, ArrayBuffer(758.0, 124.40000000000009), PIE_TROUGH_AUTAIR, BUF12:E1+2)
		L2C_Aspirate(Tip4, 124.40000000000009, PIE_TROUGH_AUTAIR, BUF12:E1)
		L2C_Dispense(Tip1-2,4, ArrayBuffer(758.0, 124.40000000000009, 124.40000000000009), PIE_TROUGH_AUTAIR, Rotem_RGT2:A2+2,D2)
		the aspirate could have been performed in a single step
	devices: create tests for PipetteHelperL3
	translator: need to split scripts into multiple files when plate is moved
	translator: improvement of above would be to only split scripts when a labware conflict would occur
	roboease: test liquid class, tip options, mix options
	roboease: create PipetteDevice subclass for Weizmann roboease scripts
*	roboease: PROMPT
	roboease: TRANSFER
.	roboease: TABLE
	roboease: add comments about tip usage to output
	roboease: somehow add default liquid class to a liquid (for example, add a Map[Liquid, String] to WeizmannPipetteDevice)
	roboease-evoware: pipette: default tip policy of always discarding
	roboease-evoware: print out appropriate header
	roboease translation errors:
		Rotem_Script03.conf: need to be able to pipette volumes which are larger than tips used
	roboease: try using parboiled as a replacement for scala's parser combinator (https://github.com/sirthias/parboiled/wiki)
	BsseRobot.batch*spirate() needs to batch on volume too?
	each token has a source reference so that we can ultimately find the line/col of sourcecode which a particular token came from
	KnowledgeBase:
		need to rework this concept
		we have several sources of knowledge:
			knowledge about objects specified in the protocol
			knowledge supplied by the user's customization of the protocol
			knowledge provided by protocol commands
			additional routines to find good defaults where possible
		should create an immutable KnowledgeMap in order to preserve a clear order in which the above sources are evaluated
		the first two should be fixed before evaluating the protocol commands
		we could then run multiple loops over the commands as long as they are still adding knowledge
	Tables:
		load in the evoware table; it should create roboliq objects for locations, PlateModels, plates
	Plates:
		we have various plate models
		we might need to have separate model objects for the roboliq and evoware layers
		we would like to choose the appropriate plate model for new plates we use, but also let the user specify it
		plate compatibilities should be specified for input plates
		plate compatibilities refers to which devices it can be used with, and how
		Plate
		PlateModelId
		PlateModel
		EvowarePlateModel extends PlateFamily
	Device and compilation concepts:
		Compiler
		CommandCompiler
		Device
		DeviceState
		DeviceKnowledge
		RobotState
		RobotKnowledge
		CompilerContext

		The compiler is given CompileHandlers which handle compilation of commands

		RobotState:
			RobotState contains a map of Device -> DeviceState

		RobotKnowledge:

		Objects:
			Obj -- simple placeholder
			ObjConfigL3 -- mutable configuration data for an object
			ObjStateL3 -- state data about an object on the L3 level of abstraction
			ObjConfigL1 -- immutable L1 data about an object
			ObjStateL1 -- variables which may change over time
		Devices:
			Device
			DeviceStateL3
			DeviceStateL1
		
		When compiling a command, we may need the following context information:
			Compiler (if we need to compile additional commands and score the results)
			Devices
			DeviceStates/DeviceKnowledge
			locations of parts

		Construction of Compiler object:
			create devices we want
			create RobotState object
			add initial device states for all devices to RobotState
			--
			create CommandCompilers
			create Compiler
			register CommandCompilers with Compiler
			--
			create initial device knowledge for all devices

	Knowledge Base:
		parts carry almost no data (at most a string label and a numeric id)
		two forms of data:
			partially specified
			fully specified
		the data object for a given part is created by a factory function in order to allow the user to add new parts; or alternatively, handlers can be registered
		the conversion from partially specified info to fully specified is also taken care of by the handlers
	Compiling 2011-08-23:
		L4 preprocessing: Knowledgebase
			purpose: fill in unknown parameter values
		L4 -> L3: Obj, RobotState
			purpose: translate from unfixed to fixed commands
		L3 -> L2: ObjConfig, RobotState, compile
			purpose: break down into simpler commands
		L2 -> L1: ObjConfig, RobotState
			purpose: update state and create state-ignorant commands
		L1 -> L0: ObjConfig

		L4/L3: same commands, except L4 uses Obj parameters, and L3 uses ObjConfig parameters
		L3: high-level commands (with all parameters)
		L2: commands which update state; these could also be the commands that are used for scoring
		L2/L1: same commands, except that all useful state information is added to the L1 command
		L1: commands used for native translation (do not rely on state)
	Compiling:
		L3 -> L2: knowledgebase
		L2 -> L1: initial robot state
		L1 -> L0: nothing?
		given a set of L3 commands:
			find new defaults to add to kb
			concretize existing kb
			add knowledge from all nodes in tree
			for each command in top list
				compile
				abort on error
				otherwise add knowledge from all new nodes
				process each translated item in the same way
			if knowledge has been updated
				repeat process
		CompileNode
			cmd
			result
			children
	Alternative compiling levels:
		NEED TO SPLIT CONFIG AND STATE FOR OBJSETUP AGAIN IN ORDER TO KEEP TRACK OF STATE IN HIGHER LEVEL COMMANDS?  Maybe not, since commands which need state could possibly delay translation until L1 state is available...?
		compilation cycles:
			each compilation run produces a linear list of commands rather than a tree
			L3 command can either replace itself with a list of other L3 commands or translate L2 commands
				NOTE: this might be too restrictive.  How about letting L2 commands translate to a list of both L2 and L1 commands?
			steps:
				optionally replace L3 commands with other L3 commands
				add knowledge from L3 commands
				abort if knowledge is not complete
				translate each L3 command to L2 commands (use ObjConfig parameters instead of Obj) then to L1 commands, abort on first error
				
		processor hierarchy:
			challenges:
				I'd like to be able to compile the commands in a preliminary way without a specific robot implementation
				this might mean that we need two types of state objects: ObjState and RobotState
				we also want to run through a protocol to see how much liquid is aspirated from a source well in order to know what the initial volume
				this means that we need two runs, and only the second run produces errors when well volume goes below 0
				we could pass ObjState params instead of ObjConfig, but then we'd need to compile every command before adding a new one
	Pipetting:
		state should only be updated by the underlying robot/device implementation based on L1 commands
		createCycles can try dispensing until an invalid state is reached, then revert to the previous state and start the next cycle
		cycles:
			start with assumption that tips are clean
			get first tip/dest set and associate source liquid with tip
			get pipetting policy and liquid class for each dispense
			create L1 dispense command
			update tip liquid attributes for it's post-dispense state
			add volume dispensed to amount required for tip
			peek at next tip/dest set, and check whether:
				each tip can still access the same set of source wells
				each tip can accommodate the additional volume
				dispense does not require cleaning
	Pipetting, new algorithm:
		create list of dispenses and mixes to perform
		prepend Placeholder to list

		get list of all tips used in dispenses
		if tips are disposable:
			get new tips, unless tipOverride says not to
		else
			wash all used tips with intensity Thorough, unless overridden


		for each dispense/mix:
			push state
			update state

			bPreDispenseClean = ...
			bTipsFull = if tips don't have enough space to accommodate additional aspirate
			bPreAspirateClean = ...
			check whether aspirate is required:
				either there 
	tip handling in Wash vs Dispose:
		fixed tips:
			do nothing, rinse, thorough wash, decontaminate, decontaminate with pre-rinse
		disposable tips:
			do nothing, replace (drop tip, wash syringe, get new tip), drop only
	L3C_Aspirate:
		parameters:
			tips, wells, volumes, policies
			clean degrees
			tip handling (tip type, action: none/new/force-replace)
		for disposable tips:
			if tip already present:
				if require different tip type || action == force-replace, force replacement
			else force-replacement
	Tip handling overrides:
		tip replacement action for each clean point
		tip wash action for each clean point
	Tip wash actions:
		cell | dna | other
		contamination levels: none, minor, major
		what about distinction between inside and outside?
		how to define a liquid so that we know what default tip handling actions to take for both disposable and permanent tips?
		contamination should be a map over an enumeration value so that additional contamination types can be easily added
	Wash programs:
		Later in development, I'd like for wash programs to target specific contaminants
		One challenge then would be how to keep new contaminants in sync with existing wash programs
		Maybe by having new contaminants subclass existing ones when appropriate

		decide on wash program based on the desired wash intensity and the contamination of the tips

		L3: must be implemented for a specific lab -- though I'd like to have a generic implementation based on our BSSE setup
		L2: same as for L1
		L1: wash program refers to a set of parameters for Evoware WASH
	Tip handling defaults:
	Clean:
		Clean overrides:
			//before first aspirate
			before each aspirate
			//before each aspirate of a new liquid
			//between dispenses
			after wet-contact dispense
			after last dispense

		Tip handling:
			none
			get new (drop if necessary,wash,get) [need type to get]
			drop only

		Clean & Tip handling:
			

		cleaning is flagged when tip enters the destination liquid
		cleaning is flagged when the tip will aspirate from a new liquid
		cleanBetween is normally CleanDegree.Rinse
		it will be CleanDegree.Decontaminate, however, if either the source or dest liquids require decontamination
		user can optionally override the cleanDegree

		distinguish between 1) clean if dirty and 2) forced preparatory clean
		only clean the tips we'll need
		the pre-clean instruction at the beginning of a pipetting action should clean all tips which will be used during the procedure
		the between-clean instruction should clean all tips which were previously used
		optimize clean instructions so that cleaning of a tip kind also cleans the tips of any clean instructions for that tip kind which come later, but only for clean instruction of the same degree
		optimize clean instructions which are right next to each other so that only one of them is performed
		At the T1 level: tips and degree should already be specified, meaning we need to get the degree information from the BsseRobot
	Pipetting policies:
		prefix:
			Roboliq
		naming for dispense position:
			Air - free dispense
			Top - dispense near top surface of liquid
			Mid?? dispense below top of liquid
			Bot?? dispense near bottom of well
			Dry - dispense at bottom of dry well
			Mix?? for mixing
		speeds:
			Fast
			Slow
			Norm
		example names:
			Roboliq_Cells_Air_1000
			Roboliq_Water_Air_1000
			Roboliq_Water_Air_0050
			Roboliq_Water_Dry_1000
			Roboliq_Water_Dry_0050
			Roboliq_Water_Wet_1000
			Roboliq_Water_Wet_0050
			Roboliq_DMSO_Air_1000
			Roboliq_Decon_???
			+ glycerol 1000 and 50 (oil can also be pipetted with this class)
		classes for how to do cleaning:
			always decontaminate before aspirate
			tip must be clean of extraneous liquids before dispense
			normally, whenever an extraneous contaminant is on the tip, we should decontaminate before entering another well;
				but, we could have something like a ContaminantGroupId which allows for a lesser form of cleaning

	T0 tokens can have estimated times associated with them
	
	Devices which deal with plates:
		common atomic commands for external devices: open, close, run, start
		check for plate compatibility; if replating is required, the user must specify this in the setup somehow
		for higher-level commands, device should take multiple plates and can either process them sequentially or simultaneously


----
How to define a specific experiment:

Database:
plates: id, model, barcode
liquids: id, description, washSpec, contaminants
wells: plateId, index, liquid, volume, concentration, experiment where prepared or other notes, date created, expiration date?
plasmid: id, template, forward primer, backward primer
pcrMixSpec: id, version, buffer conc, dNTP conc, template conc, forward primer conc, backward primer conc, polymerase conc, other stuff amounts, default sample volume
pcrThermocycleSpec: id, version

Experiment description:
pcrMix+pcrThermocycle
genes: gene1, gene2, gene3
volumes: 20ul
taq.location = eppendorfs(A1)

Example 1:
Distribute { source: reagents50(1), destination: cooled2(A1+96), volume: 10 ul }


Pcr {
	Product { template: "FRP572"; forwardPrimer: "FRO115"; backwardPrimer: "FRO1260" }
	Product { template: "FRP128"; forwardPrimer: "FRO1259"; backwardPrimer: "FRO1262" }
	Product { template: "FRP572"; forwardPrimer: "FRO1261"; backwardPrimer: "FRO114" }
	mixSpec: "taq"
	volumes: 20 ul
}

json:
{"Protocol": [
	"Pcr": {
		"products": [
			{ "template": "KEY'FRP572", "forwardPrimer": "KEY'FRO115"; ... }
			...
		],
		"mixSpec": "KEY'taq"
	}
]}

Example 2:
pcr = Pcr {
	Product { forwardPrimer: "FRO115"; backwardPrimer: "FRO1259/60"; template: "FRP572" }
	Product { forwardPrimer: "FRO1259/60"; backwardPrimer: "FRO1261/62"; template: "FRP128" }
	Product { forwardPrimer: "FRO1261/62"; backwardPrimer: "T3"; template: "FRP572" }
	volumes: 20 ul
}
Tube {
	liquid: pcr.mixSpec.polymeraseLiquid
	concentration: ...
	location: "eppendorfs:A1"
}

List(
	new Pcr {
		id = "pcr"
		products = List(
			new Product(...), ...
		)
		volumes = List(20 ul)
	},
	new Tube {
		liquid = ref("pcr.mixSpec.polymeraseLiquid")
		concentration = ...
		location = ref("eppendorfs:A1")
	}
)

Script processing:
x	extract all database references
	extract all well information:
		pre-existing or new
		source and/or destination
		volume aspirated prior to first dispense
		max volume aspirated
		max volume dispensed
		initial mixture
		final mixture
x	try to load all database references
x	search database for all wells containing required liquids
x	choose plates (if a liquid is present on multiple plates, choose one of them to minimize overall number of plates)
x	choose plates for new destination/temporary wells
x	choose table positions for plates and tubes
	check whether each command is complete
	show list of items which couldn't be found in the database
Progressive protocol definition:
	any command:
		we give it a map of property names to values (values may be not-required, required, set, suggested, or constrained)
		it gives us back:
			an updated property map
			L3 commands if successful
	start with commands; we'll use Pcr as an example
	The Pcr command will give us:
		WellGroup: an ordered set of wells (though the wells might not be known yet)
			a WellGroup can reference an explicit set of wells, a pool, or another WellGroup
			WellGroups are used when performing well-oriented operations;
			Pools are used when performing mixture-oriented operations
		DeviceGroup: 0 or more devices of a particular type
		Pool for each source liquid, destination product, and intermediate mixture
			pools might be merged, such as if an intermediate pool is created which turns out not to be required
		Pool: a set of wells which should be treated as conceptually equal
			initial mixture if known
			mixture transformer
			wells if known (a WellGroup?)
		Pool: number of wells (0 or more)
		WellStateTransformer: adds/removes volumes, never sets volumes, keeps track of min/max levels as transition through states
		PoolStateTransformer: places upper and lower limits on number of wells, sets the specific wells?
	Pcr:
		pcr[0].product[0].template: db("Liquid", "FRP572")
		pcr[0].product[0]...
		pcr[0].pool[0].type = VAL:0 // source only
		pcr[0].pool[0].liquid = VAL:db("Liquid", "FRP572")
		pcr[0].poolTransform[0].volAspirated = VAL:20000
		pcr[0].poolTransform[0].dVol = VAL:-20000
		pcr[0].product[0].well.count = DEFAULT:1
		pcr[0].product[0].well[0].plate = REQUIRED:
		pcr[0].product[0].well[0].index = REQUIRED:


What the program looks for:
for the specified genes, search the database for wells with required primers and templates
if not specified, choose a default pcrMixSpec (first check project, user, group, then system defaults -- allow for arbitrary hierarchy of defaults;)
	also, choose the newest version if no version is specified
if not specified, choose a default pcrThermocycleSpec
if source wells not specifed, pick the fewest possible number of source plates for those wells
if destination wells not specified, either select from among used PCR plates with enough empty wells or pick a pcr plate model for a new plate
if initial plate/tube positions not specified, choose initial positions for each one
if pcr devices not specified, check how many PCR machines we need and choose which ones to use

Questions for Fabian:
	should we keep track of the various states of a substance? For example, for a particular gene: amplified, purified, etc.
	how should default hierarchy be defined? user, project, lab group, overall
	idea of having the portable protocol extracted by software instead of written by 

Hierarchy:
	objects have properties
	properties have values
	values contain to objects, database references, or pointers to another property

Full experiment description:
Primer { id: T7 }
Primer { id: FRO1259_60 }
Primer { id: FRO1261_62 }
Primer { id: T3 }
Template { id: FRP572 }
Template { id: FRP128 }
Liquid { id: water }
Liquid { id: taq }
Liquid { id: buffer10x }
Plate {
	urn: bsse.ethz.ch/Plate/20120128_ellis
	model: "D-BSSE DWP 96 well"
	barcode: "12340rsate3235"
	location: lid
	Well {
		index: 0
		liquid: T7
		volume: 50 ul
		concentration: ...
		dateCreated: 2012-01-28
	}
	Well {
		index: 1
		liquid: T3
		...
	}
	Well ...
}
Plate {
	id: plate2
	urn: platePcr96_20120128_ellis
	model: "D-BSSE PCR 96 well"
	barcode: "12340rs23551aA"
	location: cooled2
}
/* Centrifuge balance plate */
Plate {
	id: plate3
}
Tube {
	liquid: water
	location: reagents50(1)
}
Tube {
	liquid: taq
	location: eppendorfs(A1)
	volume: 50 ul
	concentration: ...
	dateCreated: 2012-01-28
}
PcrMixSpec {
	id: pcrMixSpec1
	urn: bsse.ethz.ch/PcrMixSpec/0
	bufferLiquid: buffer10x
	primerLiquid: taq
	bufferConc: ...
	dNTPConc: ...
	...
}
PcrThermocycleSpec {
	id: pcrThermocycleSpec1
	directory: 0
	program: 5
}
CentrifugeSpec {
	id: pcrCentrifugeSpec1

}
Pcr {
	mixSpec: pcrMixSpec1
	thermocycleSpec: pcrThermocycleSpec1
	centrifugeSpec: pcrCentrifugeSpec1
	destinations: plate1(A2+3)
	genes: [
		Gene { forwardPrimer: "T7"; backwardPrimer: "FRO1259/60"; template: "FRP572" },
		Gene { forwardPrimer: "FRO1259/60"; backwardPrimer: "FRO1261/62"; template: "FRP128" },
		Gene { forwardPrimer: "FRO1261/62"; backwardPrimer: "T3"; template: "FRP572" }
	]
	volumes: 20 ul
}


----

echo '<table border="1">'
cat table0.txt | \
 sed -e 's#^x.\(.*\)#<tr><td>\1</td><td align="right">100%</td><td>2011-08-31</td></tr>#' \
  -e 's#^\..\(.*\)#<tr><td>\1</td><td align="right">90%</td><td>2011-08-31</td></tr>#' \
  -e 's#^ \*.\(.*\)#<tr><td>\1</td><td>50%</td></tr>#' \
  -e 's#^[^<]\(.*\)#<tr><td>\1</td></tr>#' \
  >> table1.html

x	DOC
x	#
.	TABLE
	OPTION UPDATE_VOL_DB
	OPTION VERIFY_TABLE
	OPTION ...
	WELL_LIST
	LOAD !!! Not sure whether this can be implemented
	REAGENT_LIST
?	MIXDEF
	PLATE
	MATRIX_LIST
x	=
x	LIST
x	REAGENT
x	LABWARE

?	PROC

x	TRANSFER_LOCATIONS
.	TRANSFER_SAMPLES (need to implement PLATE in order to complete this command)
?	TRANSFER_WELLS
?	DIST_REAGENT
x	DIST_REAGENT2
	UNITE_AND_TRANSFER ???
	RUN ???
	LOOP ???
	ENDLOOP ???
?	DIST_WELL
?	PREPARE_MIX
x	PREPARE_LIST
	MPDIST
	MPCHECKER
	MPREPLICATE
	MPREPLICATE384
	DILUTE_AND_REPLICATE384
	DILPROG
	PREPARE_MATRIX
	DIST_COL2ROW
	EQUAL_CONC
?	SERIAL_DILUTION
	PLANNED_DILUTION
	ELUTE_SAMPLES
	SEQ_PURE
12	ADD_AND_TRANSFER
	PCR_PURE
	MP_MINIPREP
	PG_PREPARE_STD
	PG_PREPARE_SAMPLE
	PLATE_TO_PCR
	PCR_SCHEDULE
7	VACUUM
	VACUUM_ON
	VACUUM_OFF
x	MIX_WELLS
	WAIT
?	PROMPT
 *	GET_TIPS
 *	DROP_TIPS
9	ROCHE_OPEN
10	ROCHE_CLOSE
11	ROCHE_RUN
 *	RUN_PCR
 *	PCR_RUN
 *	PCR_OPEN
 *	PCR_CLOSE
	PCR_COVER
	PCR_UNCOVER
 *	RUN_PCR_OPEN
 *	PCR_RUN_OPEN
	PR_OPEN
	PR_CLOSE
	PR_WAIT
	PR_RUN
	PR_MEASURE
?	REMOTE
?	EXECUTE
	READER_OPEN
	READER_CLOSE
	READER_MEASURE_OD
	READER_MEASURE_GFP
	READER_MEASURE
	READER_SET_TEMP
	INC_CLOSE
	INC_STOP
	INC_SHAKE
	INC_TEMP
3	LINKER_POS
	START_SCRIPT
 *	EVOSUB
	CSLGET
	CSLPUT
	CSLLOOP
	CFGRUN
8	TRANSFER_OBJECT
	SMS
	SHAKER_START
 *	SHAKE
	SHAKER_STOP
4	MOVE_OBJECT
5	START_TIMER
6	WAIT_TIMER
 *	MOVE_PLATE
	EMAIL
	SMS
	LOGMIX
	LOGLIST
	LOGPLATE
	CEPLATE
?	BIOPLATE
	MULTINAPLATE
	RCHPLATE
	SEQPLATE
?	%
	%%

?	load external script
	generate log
	generate checklist

Questions for Weizmann:
	What happens with the %% (ChecklistComment) commands?


def time[T](x : => T) =  {
  val start = System.nanoTime : Double
  val result = x
  val duration = (System.nanoTime : Double) - start
  println("Elapsed time " + duration / 1000000.0 + " msecs")
  result
}

