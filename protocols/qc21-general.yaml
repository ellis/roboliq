roboliq: v1
description: |
  4 tips, 5 volumes, 3 liquid classes, 3 replicates = 180 wells.  So spread over 2 96-well plates, with 6 water-only wells on each plate.
  Use dark dye for 3, 7, 15, 16, use light dye for 150.

  * Read empty plate.
  * Dispense dye.
  * Fill wells to 300ul with water (include the two empty wells on each plate).
  * Shake and read twice; again, shake and read twice

  Calculations for OrangeG dilutions:

  * stock is OrangeG 8g/L, which has absorbance of 0.9152/ul
  * dye0003: 0.9152*3 => 2.75x dilution
  * dye0015: 0.9152*15 => 13.7x dilution -- we'll use 10x dilution
  * dye0150: 0.9152*150 => 137x dilution

config:
  evowareCompiler:
    timing: false
    retractTips: false

parameters:
  excitationWavelength:
    description: excitation wavelength to read absorbance
    value: 480nm
  standardLiquidClass:
    description: Liquid class for the standard wells
    value: Roboliq_Water_Air_1000
  # testVolumes:
  #   description: The volumes to test (parameter $v$)
  #   value: [3 ul, 7 ul, 15 ul, 16 ul, 150 ul]
  # testLiquidClasses:
  #   description: The liquid classes to test (parameter $p$)
  #   value: [Roboliq_Water_Air_1000, Roboliq_Water_Dry_1000, Roboliq_Water_Wet_1000]
  # testLabwareModel:
  #   description: The labware model to test (parameter $m$)
  #   value: ourlab.model.plateModel_96_round_transparent_nunc
  # testSyringes:
  #   description: The syringes to test
  #   value: [1,2,3,4]
  shakeCount:
    description: How many times to shake the plate then measure its absorbance
    value: 2
  measureCount:
    description: How many times to measure the plate after shaking
    value: 2

objects:
  plate1:
    type: Plate
    description: dye plate
    model: $#testLabwareModel
    location: ourlab.mario.site.P3
  plate2:
    type: Plate
    description: dye plate
    model: $#testLabwareModel
    location: ourlab.mario.site.P2
  water:
    type: Variable
    value: ourlab.mario.systemLiquid
  dyeLabware0003:
    type: Plate
    description: trough for dye
    model: ourlab.model.troughModel_100ml
    location: ourlab.mario.site.R4
    contents: [Infinity l, dye0003]
  dye0003:
    type: Liquid
    description: dye with concentration such that 3ul measures about 1.
    wells: dyeLabware0003(C01 down F01)
  dyeLabware0015:
    type: Plate
    model: ourlab.model.troughModel_100ml
    location: ourlab.mario.site.R5
    contents: [Infinity l, dye0015]
  dye0015:
    type: Liquid
    description: dye with concentration such that 15ul measures about 1.
    wells: dyeLabware0015(C01 down F01)
  dyeLabware0150:
    type: Plate
    model: ourlab.model.troughModel_100ml
    location: ourlab.mario.site.R6
    contents: [Infinity l, dye0150]
  dye0150:
    type: Liquid
    description: dye with concentration such that 150ul measures about 1.
    wells: dyeLabware0150(C01 down F01)

  wellData:
    type: Data
    valueFile: ./qc21-general-wellData.jsonl

  simData:
    type: Data
    valueFile: ./qc21-general-simData.jsonl

steps:
  1:
    data: wellData
    command: data.forEachGroup
    groupBy: l
    steps:
      description: "`Plate {{l_ONE}}`"
      1:
        data: {source: simData, where: 'l == l_ONE and stage == "empty"'}
        description: Read absorbance of empty wells
        command: absorbanceReader.measurePlate
        object: $l
        program:
          excitationWavelength: $excitationWavelength
        output:
          joinKey: well
          appendTo: measurements
          simulated: "a_sim"

      2:
        data: {where: 'waterFirst'}
        description: Pre-distribute water to wells that require wet-contact
        command: pipetter.pipette
        program: $standardLiquidClass
        sources: water
        destinationLabware: $l
        destinations: $well
        volumes: $waterVolume
        clean: light
        cleanBetween: none

      3:
        data: {where: 'dyeVolume > (0 ul)'}
        description: Distribute dye
        command: pipetter.pipette
        program: $liquidClass
        sources: $k
        destinationLabware: $l
        destinations: $well
        volumes: $dyeVolume
        clean: light
        cleanBetween: flush
        syringes: $t

      4:
        data: {where: 'not waterFirst'}
        description: Post-distribute water
        command: pipetter.pipette
        program: $standardLiquidClass
        sources: water
        destinationLabware: $l
        destinations: $well
        volumes: $waterVolume
        clean: light
        cleanBetween: none

      5:
        description: Read absorbance of filled wells
        command: transporter.doThenRestoreLocation
        objects: [$l]
        steps:
          1:
            description: "Move plate to reader"
            command: transporter.movePlate
            object: $l
            destination: ourlab.mario.site.READER
          2:
            description: "`Loop to shake {{shakeCount}} times`"
            command: system.repeat
            count: $shakeCount
            variableName: shakeIdx
            steps:
              1:
                description: "`Loop to measure absorbance {{measureCount}} times`"
                command: system.repeat
                count: $measureCount
                variableName: measureIdx
                steps:
                  1:
                    data: {source: simData, where: 'l == l_ONE and stage == "full" and exp_sigma_a == shakeIdx and measureStep == measureIdx'}
                    command: system.if
                    test: "$(measureIdx == 1)"
                    then:
                      command: absorbanceReader.measurePlate
                      object: $l
                      program:
                        excitationWavelength: $excitationWavelength
                        shakerProgramBefore:
                          duration: 30 s
                          settleDuration: 10 s
                      output:
                        joinKey: well
                        appendTo: measurements
                        userValues:
                          stage: filled
                        units:
                          dyeVolume: ul
                          waterVolume: ul
                        simulated: 'a_sim'
                    else:
                      command: absorbanceReader.measurePlate
                      object: $l
                      program:
                        excitationWavelength: $excitationWavelength
                        shakerProgramBefore:
                          duration: 30 s
                          settleDuration: 10 s
                      output:
                        joinKey: well
                        appendTo: measurements
                        userValues:
                          stage: filled
                        units:
                          dyeVolume: ul
                          waterVolume: ul
                        simulated: 'a_sim'
