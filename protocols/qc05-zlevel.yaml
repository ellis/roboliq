roboliq: v1
description: |
  Gather quality control data for z-level measurements.

  Part 1:

  * dispense water volumes ranginge from 0-300ul in steps of 10ul; 2 replicates for each volume, so 62 wells. (wells and volumes should be randomly distributed)
  * measure each well with each tip twice (randomized order)

  Part 2:

    * for each tip, dispense 150ul into one well
    * using that same tip, measure zlevel twice
    * move the plate to other bench positions and repeat the measurements

variables:
  liquidClass:
    description: Liquid class to test with
    value: Roboliq_Water_Air_1000

objects:
  plate1:
    type: Plate
    description: for finding meniscus parameters
    model: ourlab.model.plateModel_96_round_transparent_nunc
    location: ourlab.mario.site.P3
  waterLabware:
    type: Plate
    description: trough for water
    model: ourlab.model.troughModel_100ml
    location: ourlab.mario.site.R6
  water:
    type: Liquid
    wells: waterLabware(C01 down F01)

  design1:
    type: Design
    randomSeed: 123
    conditions:
      part: 1
      site: ourlab.mario.site.P3
      volume*=range:
        from: 0
        till: 300
        step: 10
        units: ul
      volRep*: 2
      =concat:
        conditions:
          part: 2
          site: ourlab.mario.site.P3
          volume: 150 ul
          syringe*: 4
      wellID=range: {}
      well=allocateWells:
        rows: 8
        columns: 12
        order: shuffle
      row=calculateRow: well
      col=calculateColumn: well
      =case:
        - where: 'part == 1'
          conditions:
            stage*:
              fill:
                syringe=calculate: '((row - 1) % 4) + 1'
              measure:
                .*: 4
                syringe=:
                  groupBy: well
                  values: [1,2,3,4]
                  order: shuffle
                syringeRep*: 2
        - where: 'part == 2'
          conditions:
            stage*:
              fill:
              measure:
                site*: [ourlab.mario.site.P2, ourlab.mario.site.P3, ourlab.mario.site.P4, ourlab.mario.site.P5, ourlab.mario.site.P6, ourlab.mario.site.P7, ourlab.mario.site.P8]
                syringeRep*: 2
    orderBy: [part, stage, site, col, row]

steps:
  data: {source: design1}
  1:
    data: {where: 'part == 1'}
    description: "Part 1: measure z-level at various volumes"
    1:
      data: {where: 'stage == "fill"'}
      description: "Distribute water aliquots"
      command: pipetter.pipette
      program: $@liquidClass
      sources: water
      destinationLabware: plate1
      destinations: $$well
      volumes: $$volume
      syringes: $$syringe
      clean: thorough
      cleanBetween: flush
    2:
      data: {where: 'stage == "measure"'}
      description: "Measure z-levels"
      command: experiment.forEachGroup
      groupBy: well
      steps:
        description: "`Measure {{$well}} with {{$volume}}`"
        command: pipetter.measureVolume
        program: $@liquidClass
        wellLabware: plate1
        wells: $$well
        syringes: $$syringe
        clean: none
        output:
          joinKey: well
          appendTo: measurements
          simulated: 'unit(max(0, volume/(1ul) - 30 + bignumber(random(number(1)))), "ul")'
          units:
            volume: ul

  2:
    data: {where: 'part == 2'}
    description: "Part 2: measure z-level at various sites"
    1:
      data: {where: 'stage == "fill"'}
      description: "Distribute water aliquots"
      command: pipetter.pipette
      program: $@liquidClass
      sources: water
      destinationLabware: plate1
      destinations: $$well
      volumes: $$volume
      syringes: $$syringe
      clean: thorough
      cleanBetween: flush
    2:
      data: {where: 'stage == "measure"'}
      description: "Measure z-levels"
      command: experiment.forEachGroup
      groupBy: site
      steps:
        1:
          description: "`Move plate to {{$site}}`"
          command: transporter.movePlate
          object: plate1
          destination: $site
        2:
          description: "`Measure z-levels`"
          command: pipetter.measureVolume
          program: $@liquidClass
          wellLabware: plate1
          wells: $$well
          syringes: $$syringe
          clean: none
          output:
            joinKey: well
            appendTo: measurements
            simulated: 'unit(max(0, volume/(1ul) - 30 + bignumber(random(number(1)))), "ul")'
            units:
              volume: ul
