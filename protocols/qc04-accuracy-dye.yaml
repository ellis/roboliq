roboliq: v1
description: |
  Estimate the accuracy and precision of pipetting using a dye-based assay.
  This protocol can test multiple liquid classes and volumes.

evowareCompiler:
  timing: false
  retractTips: false

parameters:
  excitationWavelength:
    description: excitation wavelength to read absorbance
    value: 480nm
  standardLiquidClass:
    description: Liquid class for the standard wells
    value: Roboliq_Water_Air_1000
  standardSyringe:
    description: Syringe to use for the standard wells
    value: 1
  standardVolumes:
    description: The volumes for the standard wells
    value: [3 ul, 7 ul, 15 ul, 16 ul, 150 ul]
  standardWellVolume:
    description: The volume we want to fill wells to when comparing absorbance
    value: 250 ul
  testVolumes:
    description: The volumes to test (parameter $v$)
    value: [3 ul, 7 ul, 15 ul, 16 ul, 150 ul]
  testLiquidClasses:
    description: The liquid classes to test (parameter $p$)
    value: [Roboliq_Water_Air_1000, Roboliq_Water_Dry_1000, Roboliq_Water_Wet_1000]
  testLabwareModel:
    description: The labware model to test (parameter $m$)
    value: ourlab.model.plateModel_96_round_transparent_nunc
  testSyringes:
    description: The syringes to test
    value: [1,2,3,4]

objects:
  plate1:
    type: Plate
    description: dye plate
    model: $#testLabwareModel
    location: ourlab.mario.site.P3
  plate2:
    type: Plate
    description: dye plate
    model: $#testLabwareModel
    location: ourlab.mario.site.P2
  plate3:
    type: Plate
    description: dye plate
    model: $#testLabwareModel
    location: ourlab.mario.site.P5
  water:
    type: Variable
    value: ourlab.mario.systemLiquid
  dyeLabware03:
    type: Plate
    description: trough for dye
    model: ourlab.model.troughModel_100ml
    location: ourlab.mario.site.R5
    contents: [Infinity l, dye03]
  dye03:
    type: Liquid
    description: dye with concentration such that 3ul measures somewhere between 0.1 and 0.2
    wells: dyeLabware03(C01 down F01)
  dyeLabware30:
    type: Plate
    model: ourlab.model.troughModel_100ml
    location: ourlab.mario.site.R6
    contents: [Infinity l, dye30]
  dye30:
    type: Liquid
    description: |
      dye with concentration such that 30ul measures about 0.1;
      but in our particular case here, we only use one volume greater than 30ul,
      which is 150 ul, so we can also just use dye such at 150ul is readable
      (e.g. generally somewhere between .1 and 1, or even between 0.06 and 3 for our reader)
    wells: dyeLabware30(C01 down F01)

  design1:
    type: Design
    randomSeed: 123
    conditions:
      totalVolume: $#standardWellVolume
      role: test
      replicate*: 3
      liquidClass*: $#testLiquidClasses
      dyeVolume*: $#standardVolumes
      syringe*: $#testSyringes
      plate=allocatePlates:
        plates: [plate1, plate2, plate3]
        wellsPerPlate: ${96 - 3 - 3 * standardWellVolume.length}
      # we need to add 4 control wells for each plate, plus standard wells
      .=concat:
        groupBy: [totalVolume, plate]
        conditions:
          role*:
            control:
              replicate*: 3
              liquidClass: $#standardLiquidClass
              dyeVolume: 0 ul
              syringe=:
                values: $#testSyringes
                order: reshuffle
            standard:
              replicate*: 3
              liquidClass: $#standardLiquidClass
              dyeVolume*: $#standardVolumes
              syringe: $#standardSyringe
      waterVolume=calculate: 'totalVolume - dyeVolume'
      well=allocateWells:
        groupBy: plate
        rows: 8
        columns: 12
      dyeSource=calculate: '(dyeVolume < 30 ul) ? "dye03" : "dye30"'
      waterFirst=calculate: '(liquidClass == "Roboliq_Water_Dry_1000") ? false : true'
    orderBy: [plate]

steps:
  data: {source: design1}
  command: experiment.forEachGroup
  groupBy: plate
  steps:
    description: "`Plate {{$plate}}`"
    1:
      description: Read absorbance of empty wells
      command: absorbanceReader.measurePlate
      object: $plate
      program:
        excitationWavelength: $#excitationWavelength
      output:
        joinKey: well
        appendTo: measurements
        userValues:
          stage: empty
        units:
          totalVolume: ul
          dyeVolume: ul
          waterVolume: ul
        simulated: "(waterFirst) ? random(number(0.03), number(0.04)) : random(number(0.04), number(0.06))"

    2:
      data: {where: 'waterFirst'}
      description: Pre-distribute water to wells that don't require dry-contact
      command: pipetter.pipette
      program: $#standardLiquidClass
      sources: water
      destinationLabware: $plate
      destinations: $$well
      volumes: $$waterVolume
      clean: light
      cleanBetween: none

    3:
      description: Read absorbance of wells after adding water
      command: absorbanceReader.measurePlate
      object: $plate
      program:
        excitationWavelength: $#excitationWavelength
      output:
        joinKey: well
        appendTo: measurements
        userValues:
          stage: dyeless
        units:
          totalVolume: ul
          dyeVolume: ul
          waterVolume: ul
        simulated: "(waterFirst) ? random(number(0.03), number(0.04)) : random(number(0.04), number(0.06))"

    4:
      description: Distribute dye
      command: pipetter.pipette
      program: $$liquidClass
      sources: $$dyeSource
      destinationLabware: $plate
      destinations: $$well
      volumes: $$dyeVolume
      clean: light
      cleanBetween: flush

    5:
      data: {where: 'not waterFirst'}
      description: Post-distribute water
      command: pipetter.pipette
      program: $#standardLiquidClass
      sources: water
      destinationLabware: $plate
      destinations: $$well
      volumes: $$waterVolume
      clean: light
      cleanBetween: none

    6:
      description: Read absorbance of empty wells
      command: absorbanceReader.measurePlate
      object: $plate
      program:
        excitationWavelength: $#excitationWavelength
      output:
        joinKey: well
        appendTo: measurements
        userValues:
          stage: filled
        units:
          totalVolume: ul
          dyeVolume: ul
          waterVolume: ul
        simulated: 'bignumber(random(number(0.03), number(0.04))) + (dyeVolume / ul) * ((dyeSource == "dye03") ? 0.0333 : 0.00333)'
