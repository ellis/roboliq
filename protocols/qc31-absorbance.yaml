# npm run processor -- --progress --print-designs -P ../compiled ../config/bsse-mario.js ../protocols/qc23-dilution.yaml -T
# npm run processor -- --progress -P ../compiled ../config/bsse-mario.js ../protocols/qc31-absorbance.yaml -T

roboliq: v1
description: |

  To start with, I'm just going to test wet dispense for the low volumes 3,7,15ul.
  Assume we already know beta[W, 15].
  Use absorbance measurements to estimate:

  * sigma_v[d]
  * gamma, sigma_gamma
  * alpha_k for dye0075
  * source loss on aspriation (if we want to bother calculating it)
  * sigma_a
  * alpha_i, sigma_alpha_i
  * alpha_v, sigma_alpha_v
  * sigma_alpha_b
  * beta[W, c(3, 7)]

  # Protocol

  * handle volumes 3, 7, 15, and use dye0008, so that 16ul has absorbance ~2, and 3/2 is ~0.19
  * measure empty plate
  * allocate 16 control wells to characterize 150ul Air
  * allocate 8 water-only wells and fill them
  * since we're doing wet dispense here, fill all relevant wells with water appropriately
  * in 8 of the 16 control wells, dispense 2 x 150 ul dye0150
  * mix D dye and (300-D) water in wells (any p)
      - v1[i] is volume of dye
      - c1[i] is relative concentration of dispense
      - alpha_k is concentration of source
      - v2[i] is volume of water
      - amount[i] is `v1[i] * c1[i] * alpha_k`
      - `a[i] = a0[i] + av[i] + ab[i]*amount[i]`
      - total volume = v1[i] + v2[i]
      - conc[i] = amount[i] / total volume
  * shake plate
  * read plate (2 x shake and 2 x read)
  * extract 150ul p=A to another well, fill it to 300ul with water
      - v3[i2] is volume of transfer
      - c3[i2] is relative concentration of dispense (using 150ul Air)
      - v4[i2] is volume of water
      - amount[i2] is `v3[i2] * c3[i2] * conc[i]`
      - `a[i2] = a0[i2] + av[i2] + ab[i2]*amount[i2]`
  * fill source wells to 300ul too
  * read plate (2 x shake and 2 x read)

  Well counts for volumes 3, 7, 15:

  - `tips * volumes * liquidClasses * wellsPerGroup = 4 * 3 * 1 * 2 = 24`
  - if we leave water-only wells, we can have three replicates (72 wells)
  - we'll allocate 16 wells to estimate the dilution of 150ul
  - 8 water-only wells

  OrangeG 8g/L dilution calculations:

  * stock concentration is 0.9152/ul
  * For 150ul dye to be 1: 0.9152*150 = 137x dilution
  * For 8ul dye to be 1: 0.9152*8 = 7.32x dilution
    * put 5x1000ul into 50ul tube, fill to 36.6ml

config:
  evowareCompiler:
    timing: false
    retractTips: false

parameters:
  excitationWavelength:
    description: excitation wavelength to read absorbance
    value: 480nm
  standardLiquidClass:
    description: Liquid class for the standard wells
    value: Roboliq_Water_Air_1000
  # testVolumes:
  #   description: The volumes to test (parameter $v$)
  #   value: [3 ul, 7 ul, 15 ul, 16 ul, 150 ul]
  # testLiquidClasses:
  #   description: The liquid classes to test (parameter $p$)
  #   value: [Roboliq_Water_Air_1000, Roboliq_Water_Dry_1000, Roboliq_Water_Wet_1000]
  # testLabwareModel:
  #   description: The labware model to test (parameter $m$)
  #   value: ourlab.model.plateModel_96_round_transparent_nunc
  # testSyringes:
  #   description: The syringes to test
  #   value: [1,2,3,4]
  shakeCount:
    description: How many times to shake the plate then measure its absorbance
    value: 2
  measureCount:
    description: How many times to measure the plate after shaking
    value: 2

objects:
  plate1:
    type: Plate
    description: for finding meniscus parameters
    model: ourlab.model.plateModel_96_round_transparent_nunc
    location: ourlab.mario.site.P3
  dyeLabware0150:
    type: Plate
    description: trough for dye
    model: ourlab.model.troughModel_100ml
    location: ourlab.mario.site.R5
  dye0150:
    type: Liquid
    description: dye with concentration such that 250ul measures somewhere between 1 and 2
    wells: dyeLabware0150(C01 down F01)
  dyeLabware0008:
    type: Plate
    description: trough for dye
    model: ourlab.model.troughModel_100ml
    location: ourlab.mario.site.R6
  dye0008:
    type: Liquid
    description: dye with concentration such that 250ul measures somewhere between 1 and 2
    wells: dyeLabware0008(C01 down F01)
  water:
    type: Variable
    value: ourlab.mario.systemLiquid

  wellData:
    type: Data
    valueFile: ./qc31-absorbance-wellData.jsonl

  simData:
    type: Data
    valueFile: ./qc31-absorbance-simData.jsonl

  measureAbsorbance:
    type: Template
    description: |
      Parameters:

      * shakeCount: number of cycles for shaking then measuring
      * measureCount: number of times to measure after shaking
      * plate: plate
    template: |
      {
        "description": "`Read absorbance of filled wells`",
        "command": "transporter.doThenRestoreLocation",
        "objects": ["{{plate}}"],
        "steps": {
          "1": {
            "description": "Move plate to reader",
            "command": "transporter.movePlate",
            "object": "{{plate}}",
            "destination": "ourlab.mario.site.READER"
          },
          "2": {
            "description": "`Loop to shake {{shakeCount}} times`",
            "command": "system.repeat",
            "count": {{shakeCount}},
            "variableName": "shakeIdx",
            "steps": {
              "1": {
                "description": "`Shake (\{{shakeIdx}} of {{shakeCount}}) and measure absorbance {{measureCount}} times`",
                "command": "system.repeat",
                "count": {{measureCount}},
                "variableName": "measureIdx",
                "steps": {
                  "1": {
                    "data": {
                      "where": {
                        "shakeRep": "$shakeIdx",
                        "measureRep": "$measureIdx"
                      }
                    },
                    "description": "`Measure wells \{{well}}`",
                    "command": "system.if",
                    "test": "$(measureIdx == 1)",
                    "then": {
                      "description": "`Shake (\{{shakeIdx}} of {{shakeCount}}) and measure`",
                      "command": "absorbanceReader.measurePlate",
                      "object": "{{plate}}",
                      "program": {
                        "excitationWavelength": "$excitationWavelength",
                        "shakerProgramBefore": {
                          "duration": "30 s",
                          "settleDuration": "10 s"
                        }
                      },
                      "output": {
                        "joinKey": "well",
                        "appendTo": "measurements",
                        "units": {
                          "dyeVolume": "ul",
                          "waterVolume": "ul"
                        },
                        "simulated": "a_sim"
                      }
                    },
                    "else": {
                      "description": "`Measure absorbance (\{{measureIdx}} of {{measureCount}})`",
                      "command": "absorbanceReader.measurePlate",
                      "object": "{{plate}}",
                      "program": {
                        "excitationWavelength": "$excitationWavelength"
                      },
                      "output": {
                        "joinKey": "well",
                        "appendTo": "measurements",
                        "units": {
                          "dyeVolume": "ul",
                          "waterVolume": "ul"
                        },
                        "simulated": "a_sim"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

steps:
  1:
    data: wellData
    description: "Test dilution of Air and Wet dispense"
    1:
      data: {source: simData, where: {stage: '"M1"'}}
      description: Read absorbance of empty wells
      command: absorbanceReader.measurePlate
      object: $l_ONE
      program:
        excitationWavelength: $excitationWavelength
      output:
        joinKey: well
        appendTo: measurements
        simulated: "a_sim"

    2:
      data: {where: {roleA: '"water"'}}
      description: "`Fill water wells`"
      command: pipetter.pipette
      program: $standardLiquidClass
      sources: water
      destinationLabware: $l_ONE
      destinations: $well
      volumes: 300 ul
      syringes: $t
      cleanBegin: light
      clean: none

    3:
      data: {where: {roleA: '"test"'}, orderBy: i}
      description: "Dispense water to test wells"
      command: pipetter.pipette
      program: $liquidClass_ONE
      sources: water
      destinationLabware: $l_ONE
      destinations: $well
      volumes: $(300 ul - volume)
      syringes: $t
      clean: none
      cleanEnd: thorough

    4:
      data: {where: {roleA: '"control"', roleB: '"dst"'}}
      description: "`Dispense 2x 150ul dye0150 to wells {{well}}`"
      command: pipetter.pipette
      program: $liquidClass_ONE
      sources: $k_ONE
      destinationLabware: $l_ONE
      items:
        data():
          design:
            destination*: $well
            syringe: $t
            layer*: 2
      volumes: 150 ul
      clean: light
      cleanBetween: flush

    # 5:
    #   data: {source: simData, where: {stage: '"M2"'}}
    #   description: Read absorbance of water wells
    #   command: absorbanceReader.measurePlate
    #   object: $l_ONE
    #   program:
    #     excitationWavelength: $excitationWavelength
    #     shakerProgramBefore:
    #       duration: 30 s
    #       settleDuration: 10 s
    #   output:
    #     joinKey: well
    #     appendTo: measurements
    #     simulated: "a_sim"

    5:
      data: {where: {roleA: '"test"', roleB: '"src"'}}
      description: Dispense dye0008 aliquots to origin test wells
      command: pipetter.pipette
      program: $liquidClass_ONE
      sources: $k_ONE
      destinationLabware: $l_ONE
      destinations: $well
      volumes: $volume
      syringes: $t
      clean: light
      cleanBetween: flush

    6:
      description: Shake plate
      command: shaker.shakePlate
      object: $l_ONE
      program:
        duration: 1 minute

    7:
      data: {source: simData, where: {stage: '"M2"'}}
      description: "Measure wells after filling"
      command: system.call
      name: measureAbsorbance
      lazyParams:
        plate: $l_ONE
        shakeCount: $shakeCount
        measureCount: $measureCount

    8:
      # data: {where: {roleA: {in: ['"test"', '"control"']}}}
      data: {where: 'roleA == "test" or roleA == "control"'}
      description: Transfer 150ul aliquots from test source to test destination
      command: pipetter.pipette
      program: $standardLiquidClass
      sourceLabware: $l_ONE
      sources:
        data():
          where: {roleB: '"src"'}
          map: $well
      destinationLabware: $l_ONE
      items:
        data():
          where: {roleB: '"dst"'}
          map:
            destination: $well
            syringe: $t
      volumes: 150 ul
      clean: light
      cleanBetween: flush

    9:
      data: {source: simData, where: {stage: '"M2"'}}
      description: "Measure wells after filling"
      command: system.call
      name: measureAbsorbance
      lazyParams:
        plate: $l_ONE
        shakeCount: $shakeCount
        measureCount: $measureCount
