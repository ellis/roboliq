roboliq: v1
description: |
  Estimate evaporation rates over a plate and at different bench sites.

  OrangeG 8g/L calculations to achive 125 ul => ~.5:

  * Absorbance of stock Orange G: 0.9152/ul
  * For 125ul dye to be 0.5: 0.9152*125 / 0.5 = 114x dilution (I'll use our 100x dilution)


parameters:
  excitationWavelength:
    description: excitation wavelength to read absorbance
    value: 480nm
  standardLiquidClass:
    description: Liquid class for the standard wells
    value: Roboliq_Water_Air_1000
  standardWellVolume:
    description: The volume we want to fill wells to when comparing absorbance
    value: 250 ul
  testLabwareModel:
    description: The labware model to test (parameter $m$)
    value: ourlab.model.plateModel_96_round_transparent_nunc
  # testSyringes:
  #   description: The syringes to test
  #   value: [1,2,3,4]

objects:
  plate1:
    type: Plate
    description: dye plate
    model: $#testLabwareModel
    location: ourlab.mario.site.P3
  plate2:
    type: Plate
    description: dye plate
    model: $#testLabwareModel
    location: ourlab.mario.site.P2
  water:
    type: Variable
    value: ourlab.mario.systemLiquid
  dyeLabware:
    type: Plate
    description: trough for dye
    model: ourlab.model.troughModel_100ml
    location: ourlab.mario.site.R6
    contents: [Infinity l, dye]
  dye:
    type: Liquid
    description: dye with concentration such that 3ul measures somewhere between 0.1 and 0.2
    wells: dyeLabware(C01 down F01)

  # design1:
  #   type: Design
  #   conditions:
  #     testVolume: 150 ul
  #     sourceLabware: null
  #     sourceWell: dye
  #     destinationLabware: plate1
  #     destinationWell*: [A01, B01, C01, D01]
  #     volume=calculate: 'testVolume'
  #     step*:
  #       - {}
  #       - sourceLabware=calculate: destinationLabware
  #         sourceWell=calculate: destinationWell
  #         destinationLabware: plate2
  #         volume=calculate: 'volume / 2'
  #   orderBy: [step]
  #
  design1:
    type: Design
    description: |
      * measureVolume: volume to fill the well to before performing absorbance measurements
      * plateType: 1 for the plate where evaporation takes place, 2 for the plate that we extract aliquots to.
    conditions:
      measureVolume: $#standardWellVolume
      testVolume*: [250 ul]
      extractVolume=calculate: 'testVolume / 2'
      site*: ourlab.mario.site.P3
      plate: plate1
      role*:
        test:
          source: dye
          well*=allocateWells:
            wells: A01 down block H02 + A03 down block B10 + G03 down block H10 + A11 down block H12 + D06 down block E07
            rows: 8
            columns: 12
        water:
          source: water
          well*=allocateWells:
            wells: C03 down block F05 + C06 + F06 + C07 + F07 + C08 down block F10
            rows: 8
            columns: 12
      plateType*:
        - {}
        - plate: plate2
          dyeVolume=calculate: 'testVolume / 2'
          .caseA=case:
            # Change some control wells to standard wells
            - where: 'role == "water"'
              conditions:
                role: [water, water, water, water, refA, refA, refA, refA, refB, refB, refB, refB, water, water, water, water, refA, refA, refA, refA, refB, refB, refB, refB, water, water, water, water]
      row=calculateRow: well
      col=calculateColumn: well
    orderBy: [plate, col, row]
steps:
  data: {source: design1}
  1:
    data: {where: 'plateType == 1'}
    description: Fill wells with water and dye
    command: pipetter.pipette
    program: $#standardLiquidClass
    sources: $$source
    destinationLabware: $plate
    destinations: $$well
    volumes: $$testVolume
    clean: flush
    cleanBegin: thorough

  2:
    description: Wait for two hours for evaporation
    command: timer.sleep
    duration: 2 hours

  3:
    data: {where: 'source == "dye"'}
    description: Transfer half of the volume from the dye wells to a new plate
    command: pipetter.pipette
    program: $#standardLiquidClass
    sourceLabware:
      data():
        where: 'plateType == 1'
        value: plate
        head: true
    sources:
      data():
        where: 'plateType == 1'
        value: well
    destinationLabware:
      data():
        where: 'plateType == 2'
        value: plate
        head: true
    destinations:
      data():
        where: 'plateType == 1'
        value: well
    volumes: $extractVolume
    clean: flush

  4:
    data: {where: 'plateType == 2 and role == "water"'}
    description: fill dyeless control wells
    command: pipetter.pipette
    program: $#standardLiquidClass
    sources: water
    destinationLabware: $plate
    destinations: $$well
    volumes: $measureVolume
    clean: none
    cleanEnd: light

  5:
    data: {where: 'plateType == 2 and role == "refA"'}
    description: dispense several replicates of the dye volume into certain empty wells of the destination plate
    command: pipetter.pipette
    program: $#standardLiquidClass
    sources: dye
    destinationLabware: $plate
    destinations: $$well
    volumes: $testVolume
    clean: flush

  6:
    data: {where: 'plateType == 2 and (role == "refA" or role == "refB")'}
    description: transfer half of that volume to other empty wells on the destination plate
    command: pipetter.pipette
    program: $#standardLiquidClass
    sourceLabware: $plate
    sources:
      data():
        where: 'role == "refA"'
        value: well
    destinationLabware: $plate
    destinations:
      data():
        where: 'role == "refB"'
        value: well
    volumes: $extractVolume
    clean: flush

  7:
    data: {where: 'role != "water"'}
    description: top off the source and destination wells to 250ul
    command: pipetter.pipette
    program: $#standardLiquidClass
    sources: water
    items:
      data():
        template:
          destination: '`{{$plate}}({{$well}})`'
    volumes: $(measureVolume - extractVolume)
    clean: none
    cleanEnd: light

  8:
    description: Read absorbance
    command: experiment.forEachGroup
    groupBy: plate
    steps:
      description: "`Read absorbance of {{$plate}}`"
      command: absorbanceReader.measurePlate
      object: $plate
      program:
        excitationWavelength: $#excitationWavelength
      output:
        joinKey: well
        appendTo: measurements
        units:
          testVolume: ul
          extractFinal: ul
        simulated: 'bignumber(random(number(0.03), number(0.04))) + (role == "water" ? 0 : role == "refA" ? 0.5 : role == "refB" ? 0.48 : plateType == 1 ? 0.4 : 0.56)'
