roboliq: v1
description: |
  Find the amount of unintended dilution taking place in the fixed tips.

  * Measure empty plate
  * Fill a few control wells with 250ul water and read their absorbance.
  * for v in 3ul, 7ul, 15ul, 16ul, and 150ul:
      * each tip dispenses 250ul into a well
      * transfer v to next empty well n times (where n = 1 for 150ul, 9 for other volumes)
      * fill source and destination wells to 250ul
      * measure absorbance of source and destination wells
      * repeat the process for 3 dilutions per volume

  OrangeG 8g/L calculations to achive 250ul => ~2:

  * 50 ul / 2^5 = 1.43
  * 0.9152/ul
  * For 250ul dye to be 2: 0.9152*250 / 2 = 114x dilution (I'll use our 100x dilution)

variables:
  excitationWavelength:
    description: excitation wavelength to read absorbance
    value: 480nm

objects:
  plate1:
    type: Plate
    description: for finding meniscus parameters
    model: ourlab.model.plateModel_96_round_transparent_nunc
    location: ourlab.mario.site.P3
  tubes:
    type: Plate
    description: trough for dye
    model: ourlab.model.troughModel_100ml
    location: ourlab.mario.site.R6
  dye:
    type: Liquid
    description: dye with concentration such that 250ul => 2
    wells: tubes(A01)
  water:
    type: Variable
    value: ourlab.mario.systemLiquid

  design1:
    type: Design
    description: |
      * 4 control wells to be filled with water to 250ul
    conditions:
      stage: dilute
      liquidClass*: [Roboliq_Water_Air_1000, Roboliq_Water_Dry_1000]
      volume*: [3 ul, 7 ul, 15 ul, 16 ul, 150 ul]
      #volume*: [16 ul]
      count=calculate: '(volume == (150 ul)) ? 1 : 9'
      transferTotal=calculate: 'volume * count'
      totalVolume: 250 ul
      replicate*: 2
      syringe=:
        values: [1,2,3,4]
        order: reshuffle
      #syringe*: 1
      origId=range: {}
      seqId*: 4
      plate=allocatePlates:
        plates: [plate1]
        groupBy: [origId]
        wellsPerPlate: 92
      # we need to add 4 control wells for each plate
      .=concat:
        groupBy: [plate]
        conditions:
          stage: control
          totalVolume: 250 ul
          seqId*: 4
      wellId=range: {}
      srcId=calculate: '(seqId == 1) ? 0 : wellId - 1'
      well=allocateWells:
        wells: "A01 right H12"
        rows: 8
        columns: 12
        groupBy: plate
      .caseA=case:
        - where: 'stage == "dilute" and seqId == 1'
          conditions:
            stage*:
              fill:
                role: dst
                seqId=calculate: "seqId - 1"
                conc: 1
                dilutionMult: 0
              dilute:
                role: src
        - where: 'stage == "dilute" and seqId == 4'
          conditions:
            role: dst
            seqId=calculate: "seqId - 1"
        - where: 'stage == "dilute"'
          conditions:
            role*:
              dst:
                seqId=calculate: 'seqId - 1'
              src: {}
      .caseB=case:
        - where: 'stage == "dilute"'
          conditions:
            waterVolume=calculate: '(role == "src") ? transferTotal : totalVolume - transferTotal'
            .caseC=case:
              - where: 'role == "dst"'
                conditions:
                  conc=calculate: '(transferTotal/totalVolume)^seqId'
                  dilutionMult=calculate: 'seqId'
              - where: 'role == "src"'
                conditions:
                  conc=calculate: '(transferTotal/totalVolume)^(seqId - 1) * (1 - transferTotal / totalVolume)'
                  dilutionMult=calculate: 'seqId - 1'

steps:
  data: {source: design1}
  command: experiment.forEachGroup
  groupBy: plate
  steps:
    description: "`Plate {{$plate}}`"
    1:
      description: Read absorbance of empty wells
      command: absorbanceReader.measurePlate
      object: $plate
      program:
        excitationWavelength: $@excitationWavelength
        wells:
          "#data":
            value: well
            unique: true
      output:
        appendTo: measurements
        userValues:
          totalVolume: 0
        simulated: "random(number(0.04), number(0.06))"

    2:
      data: {where: 'stage == "control"'}
      description: Handle control wells
      1:
        description: Fill control wells with water
        command: pipetter.pipette
        program: Roboliq_Water_Air_1000
        sources: water
        destinationLabware: $plate
        destinations: $$well
        volumes: $totalVolume
        clean: light
        cleanBetween: none
      2:
        description: Read absorbance of control wells
        command: absorbanceReader.measurePlate
        object: $plate
        program:
          excitationWavelength: $@excitationWavelength
        output:
          joinKey: well
          appendTo: measurements
          units:
            totalVolume: ul
          simulated: "random(number(0.02), number(0.04))"

    3:
      data: {where: 'stage == "fill"'}
      1:
        description: Dispense initial dye aliquots
        command: pipetter.pipette
        sources: dye
        destinationLabware: $plate
        destinations: $$well
        volumes: $totalVolume
        clean: flush
      2:
        description: Read absorbance of control wells
        command: absorbanceReader.measurePlate
        object: $plate
        program:
          excitationWavelength: $@excitationWavelength
        output:
          joinKey: well
          appendTo: measurements
          units:
            volume: ul
            totalVolume: ul
          simulated: "random(number(1.99), number(2.01))"

    4:
      data: {where: 'stage == "dilute"'}
      description: "Perform dilutions"
      command: experiment.forEachGroup
      groupBy: seqId
      steps:
        description: "`Dilution step {{$seqId}}`"
        1:
          command: experiment.forEachGroup
          groupBy: origId
          steps:
            description: "`Transfer {{$volume}}, {{$count}} times`"
            command: system.repeat
            count: $count
            variableName: i
            steps:
              description: "`Transfer dye to next well (substep {{$i}} of {{$count}})`"
              command: pipetter.pipette
              sourceLabware: $plate
              sources:
                "#data":
                  where: 'role == "src"'
                  value: well
              destinationLabware: $plate
              destinations:
                "#data":
                  where: 'role == "dst"'
                  value: well
              volumes:
                "#data":
                  where: 'role == "dst"'
                  value: volume
              clean: flush
        2:
          description: "`Fill wells to {{$totalVolume}}`"
          command: pipetter.pipette
          program: Roboliq_Water_Air_1000
          sources: water
          destinationLabware: $plate
          destinations: $$well
          volumes: $$waterVolume
          clean: flush
        3:
          description: Read absorbance of control wells
          command: absorbanceReader.measurePlate
          object: $plate
          program:
            excitationWavelength: $@excitationWavelength
          output:
            joinKey: well
            appendTo: measurements
            units:
              volume: ul
              totalVolume: ul
            simulated: 'bignumber(random(number(1.99), number(2.01))) * conc * (0.9^dilutionMult)'
