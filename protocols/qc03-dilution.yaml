roboliq: v1
description: |
  Find the amount of unintended dilution taking place in the fixed tips.

  * Measure empty plate
  * Fill a few control wells with 250ul water and read their absorbance.
  * for v in 3ul, 7ul, 15ul, 16ul, and 150ul:
      * each tip dispenses 250ul into a well
      * transfer v to next empty well n times (where n = 1 for 150ul, 9 for other volumes)
      * fill source and destination wells to 250ul
      * measure absorbance of source and destination wells
      * repeat the process for 3 dilutions per volume

  OrangeG 8g/L calculations to achive 250ul => ~2:

  * 50 ul / 2^5 = 1.43
  * 0.9152/ul
  * For 250ul dye to be 2: 0.9152*250 / 2 = 114x dilution (I'll use our 100x dilution)

parameters:
  excitationWavelength:
    description: excitation wavelength to read absorbance
    value: 480nm

objects:
  plate1:
    type: Plate
    description: for finding meniscus parameters
    model: ourlab.model.plateModel_96_round_transparent_nunc
    location: ourlab.mario.site.P3
  dyeLabware:
    type: Plate
    description: trough for dye
    model: ourlab.model.troughModel_100ml
    location: ourlab.mario.site.R6
  dye:
    type: Liquid
    description: dye with concentration such that 250ul measures somewhere between 1 and 2
    wells: dyeLabware(C01 down F01)
  water:
    type: Variable
    value: ourlab.mario.systemLiquid

  design1:
    type: Design
    description: |
      * 4 control wells to be filled with water to 250ul
    conditions:
      stage: dilute
      volume*: [3 ul, 7 ul, 15 ul, 16 ul, 150 ul]
      liquidClass*: [Roboliq_Water_Air_1000, Roboliq_Water_Dry_1000, Roboliq_Water_Wet_1000]
      #volume*: [16 ul]
      count=calculate: '(volume == 3ul) ? 9 : (volume == 7ul) ? 4 : (volume == 15ul or volume == 16ul) ? 2 : 1'
      transferTotal=calculate: 'volume * count'
      totalVolume: 250 ul
      replicate*: 3
      group=range: {}
      plate=allocatePlates:
        plates: [plate1]
        groupBy: [origId]
        wellsPerPlate: 46
      idA=range:
        groupBy: plate
      row=calculate: '((idA - 1) % 8) + 1'
      idB=range:
        groupBy: row
      col=calculate: 'idB * 2 - 1'
      syringe=calculate: '((row - 1) % 4) + 1'
      stage*:
        fill:
          dyeVolume=calculate: 'totalVolume'
          waterVolume: 0 ul
        src:
          dyeVolume=calculate: 'totalVolume - transferTotal'
          waterVolume=calculate: 'transferTotal'
          prefill: false
        dst:
          col=calculate: 'col + 1'
          dyeVolume=calculate: 'transferTotal'
          waterVolume=calculate: 'totalVolume - transferTotal'
          prefill=calculate: 'liquidClass == "Roboliq_Water_Wet_1000"'
      # we need to add 4 control wells for each plate
      .=concat:
        groupBy: [plate]
        conditions:
          stage: control
          totalVolume: 250 ul
          replicate*: 3
          col: 12
          row=calculate: '8 - (3 - replicate)'
          dyeVolume: 0 ul
          waterVolume=calculate: 'totalVolume'
      well=calculateWell:
        row: row
        column: col
      .caseA=case:
        - where: 'stage == "src" or stage == "dst"'
          conditions:
            # count2=calculate: count
            step*=range:
              groupBy: group
              till: count

steps:
  data: {source: design1}
  command: experiment.forEachGroup
  groupBy: plate
  steps:
    description: "`Plate {{$plate}}`"
    # 1:
    #   description: Read absorbance of empty wells
    #   command: absorbanceReader.measurePlate
    #   object: $plate
    #   program:
    #     excitationWavelength: $#excitationWavelength
    #     wells:
    #       "#data":
    #         value: well
    #         unique: true
    #   output:
    #     appendTo: measurements
    #     userValues:
    #       totalVolume: 0
    #     simulated: "random(number(0.04), number(0.06))"

    2:
      data: {where: 'stage == "control"'}
      description: Handle control wells
      1:
        description: Fill control wells with water
        command: pipetter.pipette
        program: Roboliq_Water_Air_1000
        sources: water
        destinationLabware: $plate
        destinations: $$well
        volumes: $totalVolume
        clean: light
        cleanBetween: none
      2:
        description: Read absorbance of control wells
        command: absorbanceReader.measurePlate
        object: $plate
        program:
          excitationWavelength: $#excitationWavelength
        output:
          joinKey: well
          appendTo: measurements
          units:
            volume: ul
            totalVolume: ul
            dyeVolume: ul
            waterVolume: ul
          simulated: "random(number(0.02), number(0.04))"

    3:
      data: {where: 'stage == "fill"'}
      1:
        description: Dispense initial dye aliquots
        command: pipetter.pipette
        program: Roboliq_Water_Air_1000
        sources: dye
        destinationLabware: $plate
        destinations: $$well
        volumes: $totalVolume
        clean: flush
      2:
        description: Read absorbance of control wells
        command: absorbanceReader.measurePlate
        object: $plate
        program:
          excitationWavelength: $#excitationWavelength
        output:
          joinKey: well
          appendTo: measurements
          units:
            volume: ul
            dyeVolume: ul
            waterVolume: ul
            totalVolume: ul
          simulated: "random(number(1.99), number(2.01))"

    4:
      data: {where: 'stage == "src" or stage == "dst"'}
      description: "Perform dilutions"
      1:
        data: {where: 'stage == "dst" and step == 1 and prefill'}
        description: "`Pre-fill wells with water that require wet contact`"
        command: pipetter.pipette
        program: Roboliq_Water_Air_1000
        sources: water
        destinationLabware: $plate
        destinations: $$well
        volumes: $$waterVolume
        clean: none
        cleanEnd: thorough
      2:
        command: experiment.forEachGroup
        groupBy: [step, liquidClass]
        steps:
          description: "`Transfer step {{$step}} using {{$liquidClass}}`"
          command: pipetter.pipette
          program: $liquidClass
          sourceLabware: $plate
          sources:
            "#data":
              where: 'stage == "src"'
              value: well
          destinationLabware: $plate
          destinations:
            "#data":
              where: 'stage == "dst"'
              value: well
          volumes:
            "#data":
              where: 'stage == "dst"'
              value: volume
          clean: flush
      3:
        data: {where: 'step == 1 and not prefill'}
        description: "`Post-fill wells to {{$totalVolume}} with water`"
        command: pipetter.pipette
        program: Roboliq_Water_Air_1000
        sources: water
        destinationLabware: $plate
        destinations: $$well
        volumes: $$waterVolume
        clean: none
        cleanEnd: thorough
      4:
        data: {where: 'step == 1'}
        description: Read absorbance of control wells
        command: absorbanceReader.measurePlate
        object: $plate
        program:
          excitationWavelength: $#excitationWavelength
        output:
          joinKey: well
          appendTo: measurements
          units:
            volume: ul
            totalVolume: ul
            dyeVolume: ul
            waterVolume: ul
          simulated: 'bignumber(random(number(1.99), number(2.01))) * (dyeVolume / totalVolume) * ((stage == "src") ? 1 : 0.9)'
