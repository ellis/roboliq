# npm run processor -- --progress --print-designs -P ../compiled ../config/bsse-mario.js ../protocols/qc23-dilution.yaml -T

roboliq: v1
description: |
  Find the amount of unintended dilution taking place in the fixed tips.

  * Measure empty plate
  * Fill a few control wells with 250ul water and read their absorbance.
  * for v in 3ul, 7ul, 15ul, 16ul, and 150ul:
      * each tip dispenses 250ul dye into a well
      * transfer v to next empty well n times (where n = 1 for 150ul, 9 for other volumes)
      * fill source and destination wells to 250ul
      * measure absorbance of source and destination wells

  OrangeG 8g/L calculations to achive 250ul => ~2:

  * 50 ul / 2^5 = 1.43
  * 0.9152/ul
  * For 250ul dye to be 2: 0.9152*250 / 2 = 114x dilution (I'll use our 100x dilution)

config:
  evowareCompiler:
    timing: false
    retractTips: false

parameters:
  excitationWavelength:
    description: excitation wavelength to read absorbance
    value: 480nm
  standardLiquidClass:
    description: Liquid class for the standard wells
    value: Roboliq_Water_Air_1000
  # testVolumes:
  #   description: The volumes to test (parameter $v$)
  #   value: [3 ul, 7 ul, 15 ul, 16 ul, 150 ul]
  # testLiquidClasses:
  #   description: The liquid classes to test (parameter $p$)
  #   value: [Roboliq_Water_Air_1000, Roboliq_Water_Dry_1000, Roboliq_Water_Wet_1000]
  # testLabwareModel:
  #   description: The labware model to test (parameter $m$)
  #   value: ourlab.model.plateModel_96_round_transparent_nunc
  # testSyringes:
  #   description: The syringes to test
  #   value: [1,2,3,4]
  shakeCount:
    description: How many times to shake the plate then measure its absorbance
    value: 3
  measureCount:
    description: How many times to measure the plate after shaking
    value: 1

objects:
  plate1:
    type: Plate
    description: for finding meniscus parameters
    model: ourlab.model.plateModel_96_round_transparent_nunc
    location: ourlab.mario.site.P3
  plate2:
    type: Plate
    description: for finding meniscus parameters
    model: ourlab.model.plateModel_96_round_transparent_nunc
    location: ourlab.mario.site.P2
  dyeLabware0150:
    type: Plate
    description: trough for dye
    model: ourlab.model.troughModel_100ml
    location: ourlab.mario.site.R6
  dye0150:
    type: Liquid
    description: dye with concentration such that 250ul measures somewhere between 1 and 2
    wells: dyeLabware0150(C01 down F01)
  water:
    type: Variable
    value: ourlab.mario.systemLiquid

  wellAWData:
    type: Data
    valueFile: ./qc23-dilution-wellAWData.jsonl

  simAWData:
    type: Data
    valueFile: ./qc23-dilution-simAWData.jsonl

  measureAbsorbance:
    type: Template
    description: |
      Parameters:

      * shakeCount: number of cycles for shaking then measuring
      * measureCount: number of times to measure after shaking
      * dataSource: data source
      * dataWhere: data 'where' specification
    template: |
      {
        "description": "Read absorbance of filled wells",
        "command": "transporter.doThenRestoreLocation",
        "objects": ["$l"],
        "steps": {
          "1": {
            "description": "Move plate to reader",
            "command": "transporter.movePlate",
            "object": "$l",
            "destination": "ourlab.mario.site.READER"
          },
          "2": {
            "description": "`Loop to shake {{shakeCount}} times`",
            "command": "system.repeat",
            "count": {{shakeCount}},
            "variableName": "shakeIdx",
            "steps": {
              "1": {
                "description": "`Loop to measure absorbance {{measureCount}} times`",
                "command": "system.repeat",
                "count": {{measureCount}},
                "variableName": "measureIdx",
                "steps": {
                  "1": {
                    "data": {
                      "source": "{{dataSource}}",
                      "where": "{{{dataWhere}}}"
                    },
                    "command": "system.if",
                    "test": "$(measureIdx == 1)",
                    "then": {
                      "command": "absorbanceReader.measurePlate",
                      "object": "$l",
                      "program": {
                        "excitationWavelength": "$excitationWavelength",
                        "shakerProgramBefore": {
                          "duration": "30 s",
                          "settleDuration": "10 s"
                        }
                      },
                      "output": {
                        "joinKey": "well",
                        "appendTo": "measurements",
                        "userValues": {
                          "stage": "filled"
                        },
                        "units": {
                          "dyeVolume": "ul",
                          "waterVolume": "ul"
                        },
                        "simulated": "a_sim"
                      }
                    },
                    "else": {
                      "command": "absorbanceReader.measurePlate",
                      "object": "$l",
                      "program": {
                        "excitationWavelength": "$excitationWavelength"
                      },
                      "output": {
                        "joinKey": "well",
                        "appendTo": "measurements",
                        "userValues": {
                          "stage": "filled"
                        },
                        "units": {
                          "dyeVolume": "ul",
                          "waterVolume": "ul"
                        },
                        "simulated": "a_sim"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

steps:
  1:
    data: wellAWData
    description: "Test dilution of Air and Wet dispense"
    1:
      data: {source: simAWData, where: 'stage == "empty"'}
      description: Read absorbance of empty wells
      command: absorbanceReader.measurePlate
      object: $l
      program:
        excitationWavelength: $excitationWavelength
      output:
        joinKey: well
        appendTo: measurements
        simulated: "a_sim"

    2:
      data: {where: 'stage == "water"'}
      description: Fill water wells
      command: pipetter.pipette
      program: $standardLiquidClass
      sources: water

      destinationLabware: $l
      destinations: $well
      volumes: 300 ul
      clean: light
      cleanBetween: none

    3:
      data: {source: simAWData, where: 'stage == "water"'}
      description: Read absorbance of water wells
      command: absorbanceReader.measurePlate
      object: $l
      program:
        excitationWavelength: $excitationWavelength
        shakerProgramBefore:
          duration: 30 s
          settleDuration: 10 s
      output:
        joinKey: well
        appendTo: measurements
        simulated: "a_sim"

    4:
      data: {where: 'stage == "dye"'}
      description: "Loop through each group of liquidClass+volume combinations"
      command: data.forEachGroup
      groupBy: group
      steps:
        1:
          description: "`Dispense 2x150ul dye to {{well}}`"
          command: pipetter.pipette
          program: $standardLiquidClass
          sources: $k_ONE
          destinationLabware: $l_ONE
          items:
            data():
              design:
                destination: $well
                syringe: $t
                .rep*: 2
          volumes: 150 ul
          clean: light
          cleanBetween: none
        2:
          description: "Measure wells after filling"
          command: system.call
          name: measureAbsorbance
          params:
            shakeCount: $shakeCount
            measureCount: $measureCount
            dataSource: simAWData
            dataWhere: 'stage == \"dye\" and step == 1'
        3:
          data: {where: 'role == "test"'}
          description: "`Loop through {{stepCount_ONE}} aspiration/dispense steps`"
          command: system.repeat
          count: $stepCount
          variableName: stepIdx
          steps:
            1:
              description: "`Aspirate and re-dispense {{dilutionCountPerStep_ONE}} times (step {{stepIdx}} of {{stepCount_ONE}})`"
              command: pipetter.pipette
              program: $liquidClass
              sourceLabware: $l_ONE
              destinationLabware: $l_ONE
              items:
                data():
                  design:
                    source: $well
                    destination: $well
                    volume: $volume
                    layer*: $dilutionCountPerStep
              clean: light
              cleanBetween: none
            2:
              description: "Measure wells for dilution"
              command: system.call
              name: measureAbsorbance
              params:
                shakeCount: $shakeCount
                measureCount: $measureCount
                dataSource: simAWData
                dataWhere: 'stage == \"dilution\" and group == group_ONE and step == (stepIdx + 1) and shakeRep == shakeIdx and measureRep == measureIdx'
