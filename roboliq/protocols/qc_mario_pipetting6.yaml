roboliq: v1

description: |
  Design an experiment such as:
  10 cycles, 10 wells get dye at exactly one (incrementing) cycle, and 9 wells get dye at exactly 2..10 cycles.
  We can have replicates (e.g. 4 replicates would fit on a 96-well plate).
  In any cycle where a well gets no dye, it gets water.  We should also have control wells that are filled with water at the start.

config:
  evowareCompiler:
    timing: false
    retractTips: false

objects:
  plate1:
    type: Plate
    model: ourlab.model.plateModel_96_round_transparent_nunc
    location: ourlab.mario.site.P3
  dyeLabware:
    type: Plate
    model: ourlab.model.troughModel_100ml
    location: ourlab.mario.site.R6
    contents: [Infinity l, dye]
  dye:
    type: Liquid
    wells: dyeLabware(C01 down F01)
  waterLabware:
    type: Plate
    model: ourlab.model.troughModel_100ml
    location: ourlab.mario.site.R5
    contents: [Infinity l, water]
  water:
    type: Liquid
    wells: waterLabware(C01 down F01)

  design:
    type: Design
    randomSeed: 12345
    description: |
    conditions:
      divisions: 1 #10
      fullVolume: 150 ul
      aliquotVolume: 10 ul
      roleA*:
      - roleAName: control
        replicate*: 1 #20
        dyeDispenses: 0
        startCycle: 0
        type: empty
        waterVolume0=calculate: 'fullVolume'
      - roleAName: experiment
        type*:
          single:
            dyeDispenses: 1
            startCycle*=range: {till: divisions}
          multiple:
            dyeDispenses*=range: {from: 2, till: divisions}
            startCycle: 1
        waterVolume0=calculate: 'fullVolume - aliquotVolume * divisions'
        # cycle*=range: {till: divisions}
        # src=calculate: '(cycle >= startCycle and cycle < startCycle + dyeDispenses) ? "dye" : "water"'
        replicate*: 4
      id=range:
        order: shuffle
      syringe=:
        values: [1,2,3,4]
        order: repeat
        orderBy: id
      well=allocateWells:
        rows: 8
        columns: 12
        orderBy: id
    orderBy: id

steps:
  data:
    source: design
  1:
    command: pipetter.cleanTips
    equipment: ourlab.mario.liha
    intensity: thorough
    syringes: [1,2,3,4]
  # 2:
  #   description: "Distribute water to wells"
  #   command: pipetter.pipette
  #   sources: ourlab.mario.systemLiquid
  #   destinationLabware: plate1
  #   destinations: $$well
  #   volumes: $$waterVolume0
  #   clean: none
  #   cleanEnd: light
  3:
    description: "Process cycles: dispense dye or water aliquots to each well"
    data: {where: 'roleAName == "experiment"'}
    command: system.repeat
    count: $divisions
    variableName: cycle
    steps:
      description: "`Cycle {{$cycle}}`"
      command: pipetter.pipette
      destinationLabware: plate1
      items:
        "#data":
          template:
            source: $`(cycle >= startCycle and cycle < startCycle + dyeDispenses) ? "dye" : "water"`
      volumes: $aliquotVolume
      clean: flush

  4:
    description: "Measure absorbance"



  # 2:
  #   data: {where: 'cycle == 0', orderBy: cycleC}
  #   command: experiment.forEachGroup # HACK: remove this repeat later
  #   groupBy: fullVolume
  #   steps:
  #     1:
  #       description: "Distribute dye to the wells"
  #       command: pipetter.pipette
  #       sources: dye
  #       destinationLabware: plate1
  #       destinations: $$well
  #       volumes: $$wellVolume
  #       clean: flush
  #     3:
  #       description: "Shake plate1"
  #       command: shaker.shakePlate
  #       object: plate1
  #       program:
  #         duration: 1 minute
  #       destinationAfter: stay
  #     4:
  #       description: "Measure absorbance"
  #       command: absorbanceReader.measurePlate
  #       object: plate1
  #       program:
  #         excitationWavelength: 480nm
  #         wellDesignFactor: well
  #         userValues: {cycle: 0}
  #       outputDataset: "absorbance"
  #       destinationAfter: $site
  # 3:
  #   data: {where: 'cycle > 0'}
  #   description: "Process cycles"
  #   command: experiment.forEachGroup
  #   groupBy: cycle
  #   steps:
  #     description: "`Cycle {{$cycle}}`"
  #     1:
  #       description: "Transfer from source wells to destination wells"
  #       command: pipetter.pipette
  #       sourceLabware: plate1
  #       sources:
  #         "#data":
  #           where: 'cycleC == 1'
  #           value: well
  #       destinationLabware: plate1
  #       items:
  #         "#data":
  #           where: 'cycleC == 2'
  #           template:
  #             destination: $well
  #             volume: $dv
  #             syringe: $syringe
  #             program: $liquidClass
  #       clean: flush
  #     2:
  #       description: "Shake plate1"
  #       command: shaker.shakePlate
  #       object: plate1
  #       program:
  #         duration: 1 minute
  #       destinationAfter: stay
  #     3:
  #       description: "Measure absorbance"
  #       command: absorbanceReader.measurePlate
  #       object: plate1
  #       program:
  #         excitationWavelength: 480nm
  #         wellDesignFactor: well
  #       outputDataset: "absorbance"
  #       destinationAfter: $site
