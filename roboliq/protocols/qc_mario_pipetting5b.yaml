roboliq: v1

description: |
  Adaptation of qc_mario_pipetting5 which only uses large tips.

  This script performs repeated pipetting using dye in order to find out
  how reliable a range of volumes can be pipetted by the large tips using
  either air or wet dispense.

  At any given time, half of the wells should be full (300ul), and the other half
  should have a randomized amount less than full.  Absorbance is read.
  Then aliquots are transfed from randomized full wells
  to fill the non-full wells (the non-full wells will now be full),
  and absorbance is read.
  The process repeats.

  The volumes are chosen to be in the range of the large,
  and such that we can use the light dye.

  Steps:

  * Fill the first source wells to 250ul
  * Fill the first destination wells 250ul - first aliquotVolumes
  * shake + read absorbance
  * for each cycle, transfer from source wells to destination wells, then shake+read

config:
  evowareCompiler:
    timing: false
    retractTips: false

objects:
  plate1:
    type: Plate
    model: ourlab.model.plateModel_96_round_transparent_nunc
    location: ourlab.mario.site.P3
  dyeLightLabware:
    type: Plate
    model: ourlab.model.troughModel_100ml
    location: ourlab.mario.site.R6
    contents: [Infinity l, dyeLight]
  dyeLight:
    type: Liquid
    wells: dyeLightLabware(C01 down F01)

  design:
    type: Design
    randomSeed: 12345
    description: |
      * `cycleA`: a cycle for transfering aliquots from group A to B and back to A.
      * `cycleB`: 1 for transfer from A to B, 2 for transfer from B to A.
    conditions:
      fullVolume: 300 ul
      site: ourlab.mario.site.P3
      cycleA*: 24
      aliquot_ul*=:
        values: [5, 10, 20, 40, 60, 80, 100, 150]
        groupBy: cycleA
        order: reshuffle
      cycleB*: 2
      orderB=range:
        groupBy: [cycleA, cycleB]
      syringe=:
        values: [1,2,3,4]
        groupBy: [cycleA, cycleB]
        order: repeat
      .caseA=case:
        cases:
          - where: 'cycleB == 1'
            conditions:
              src=allocateWells:
                rows: 8
                columns: 12
                wells: A01 down block D02
                groupBy: cycleA
                orderBy: [cycleA, cycleB, orderB]
          - conditions:
              src=allocateWells:
                rows: 8
                columns: 12
                wells: E01 down block H02
                groupBy: cycleA
                order: shuffle
      dst=rotateColumn:
        column: src
        n: 1
        orderBy: [aliquot_ul, cycleA, cycleB, orderB]
      dv=calculate:
        expression: "aliquot_ul"
        units: "ul"
      tipModel: T1000
      liquidClass=:
        values:
          - Roboliq_Water_Air_1000
          - Roboliq_Water_Wet_1000
        order: reshuffle
        orderBy: [cycleA, cycleB]
        sameBy: [cycleA, cycleB]
      pos=calculate: '(liquidClass == "Roboliq_Water_Air_1000") ? "air" : "wet"'
      cycleC*:
      - well=calculate: src
        wellVolume=calculate: 'fullVolume - dv'
        dv=calculate: '-dv'
      - well=calculate: dst
        wellVolume=calculate: 'fullVolume'
      cycle=range:
        orderBy: [cycleA, cycleB]
        sameBy: [cycleA, cycleB]
      .caseB=case:
        description: "Create block for the initial pipetting"
        cases:
          - where: 'cycleA == 1 and cycleB == 1'
            description: "Add a cycle=0 block for the initial pipetting"
            conditions:
              .*:
              - {}
              - cycleA: 0
                cycle: 0
                wellVolume=calculate: '(cycleC == 1) ? fullVolume : fullVolume - dv'
                dv=calculate: 'wellVolume'
                liquidClass: Roboliq_Water_Dry_1000
                pos: dry
      id=range:
        orderBy: [cycleA, cycleB, orderB]
    orderBy: [cycleA, cycleB, orderB]

steps:
  data:
    source: design
  1:
    command: pipetter.cleanTips
    equipment: ourlab.mario.liha
    intensity: thorough
  2:
    data: {where: 'cycle == 0', orderBy: cycleC}
    command: experiment.forEachGroup # HACK: remove this repeat later
    groupBy: fullVolume
    steps:
      1:
        description: "Distribute dye to the wells"
        command: pipetter.pipette
        sources: dyeLight
        destinationLabware: plate1
        destinations: $$well
        volumes: $$wellVolume
        clean: flush
      3:
        description: "Shake plate1"
        command: shaker.shakePlate
        object: plate1
        program:
          duration: 1 minute
        destinationAfter: stay
      4:
        description: "Measure absorbance"
        command: absorbanceReader.measurePlate
        object: plate1
        program:
          excitationWavelength: 480nm
          wellDesignFactor: well
          userValues: {cycle: 0}
        outputDataset: "absorbance"
        destinationAfter: $site
  3:
    data: {where: 'cycle > 0'}
    description: "Process cycles"
    command: experiment.forEachGroup
    groupBy: cycle
    steps:
      description: "`Cycle {{$cycle}}`"
      1:
        description: "Transfer from source wells to destination wells"
        command: pipetter.pipette
        sourceLabware: plate1
        sources:
          "#data":
            where: 'cycleC == 1'
            value: well
        destinationLabware: plate1
        items:
          "#data":
            where: 'cycleC == 2'
            template:
              destination: $well
              volume: $dv
              syringe: $syringe
              program: $liquidClass
        clean: flush
      2:
        description: "Shake plate1"
        command: shaker.shakePlate
        object: plate1
        program:
          duration: 1 minute
        destinationAfter: stay
      3:
        description: "Measure absorbance"
        command: absorbanceReader.measurePlate
        object: plate1
        program:
          excitationWavelength: 480nm
          wellDesignFactor: well
        outputDataset: "absorbance"
        destinationAfter: $site
