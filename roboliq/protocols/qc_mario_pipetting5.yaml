roboliq: v1

description: |
  Half of the wells should be full of dye (e.g. 150ul), and the other half
  should have a randomized amount less than full.  Absorbance is read.
  Then aliquots are transfed from randomized full wells
  to fill the non-full wells (the non-full wells will now be full),
  and absorbance is read.
  The process repeats.

  The following factors are randomized:

  * syringe
  * liquid class
  * volume

  Steps:

  * Fill the first source wells to 150ul
  * Fill the first destination wells 150ul - first aliquotVolumes
  * shake + read absorbance
  * for each cycle, transfer from source wells to destination wells, then shake+read

config:
  evowareCompiler:
    timing: false
    retractTips: false

objects:
  plate1:
    type: Plate
    model: ourlab.model.plateModel_96_round_transparent_nunc
    location: ourlab.mario.site.P3
  dyeLightLabware:
    type: Plate
    model: ourlab.model.troughModel_25ml
    location: ourlab.mario.site.R5
    contents: [Infinity l, dyeLight]
  dyeLight:
    type: Liquid
    wells: dyeLightLabware(C01 down F01)

  design0:
    type: Design
    randomSeed: 1234
    description: |
      * `cycleA`: 
    conditions:
      fullVolume: 150 ul
      site: ourlab.mario.site.P3
      aliquotVolume*=:
        values: [3 ul, 4 ul, 5 ul, 7 ul, 10 ul, 20 ul, 30 ul, 40 ul]
      cycleA*: 2
      cycleB*: 2
      syringe=:
        values: [1,2,3,4,5,6,7,8]
        # order: reshuffle
        groupBy: [cycleA, cycleB]
      .caseA=case:
        cases:
          - where: 'cycleB == 1'
            conditions:
              src=allocateWells:
                rows: 8
                columns: 12
                wells: A01 down block D02
                groupBy: [cycleA, cycleB]
                orderBy: syringe
                # order: shuffle
          - conditions:
              src=allocateWells:
                rows: 8
                columns: 12
                wells: E01 down block H02
                groupBy: [cycleA, cycleB]
                order: shuffle
      # cycleB*: 2
      # dst=rotateColumn: src
      # .caseB=case:
      #   cases:
      #     - where: 'syringe <= 4'
      #       conditions:
      #         tipModel: T1000
      #         liquidClass=:
      #           values:
      #             - Roboliq_Water_Air_1000
      #             - Roboliq_Water_Wet_1000
      #           order: reshuffle
      #           orderBy: [cycleA, cycleB]
      #           sameBy: [cycleA, cycleB]
      #         pos=calculate: '(liquidClass == "Roboliq_Water_Air_1000") ? "air" : "wet"'
      #     - conditions:
      #         tipModel: T0050
      #         liquidClass: Roboliq_Water_Wet_0050
      #         pos: wet
      # cycleC*:
      # - well=calculate: src
      # - well=calculate: dst
      # wellVolume=calculate: '(cycleC == 1) ? fullVolume - aliquotVolume : fullVolume'
      # aliquotVolume=calculate: '(cycleC == 1) ? -aliquotVolume : aliquotVolume'
      # id=range:
      #   orderBy: [cycleA, cycleB, syringe]
    # orderBy: [syringe, cycleA, cycleB]
    # orderBy: [cycleA, cycleB, syringe]

  design:
    type: Design
    randomSeed: 123
    conditions:
      fullVolume: 150 ul
      site: ourlab.mario.site.P3
      cycleA*: 2
      wellA*=allocateWells:
        rows: 8
        columns: 12
        wells: A01 down block D02 #D12
        groupBy: cycle
      syringe=:
        values: [1,2,3,4,5,6,7,8]
        order: repeat
      .caseA=case:
        cases:
          - where: 'syringe <= 4'
            conditions:
              aliquotVolume=:
                values: [3 ul, 5 ul, 10 ul, 20 ul, 40 ul, 75 ul]
                groupBy: wellA
                sameBy: cycleA
                order: reshuffle
          - conditions:
              aliquotVolume=:
                values: [3 ul, 5 ul, 10 ul, 20 ul, 30 ul, 40 ul] #[0.1 ul, 0.2 ul, 0.5 ul, 1 ul, 3 ul, 5 ul, 10 ul, 40 ul]
                groupBy: wellA
                sameBy: cycleA
                order: reshuffle
      cycleB*: 2
      cycle=range:
        orderBy: [cycleA, cycleB]
        sameBy: [cycleA, cycleB]
      .caseB=case:
        cases:
          - where: 'syringe <= 4'
            conditions:
              tipModel: T1000
              liquidClass=:
                values:
                  - Roboliq_Water_Air_1000
                  - Roboliq_Water_Wet_1000
                order: reshuffle
                sameBy: [cycleA, cycleB]
              pos=calculate: '(liquidClass == "Roboliq_Water_Air_1000") ? "air" : "wet"'
          - conditions:
              tipModel: T0050
              liquidClass: Roboliq_Water_Wet_0050
              pos: wet
      wellB=allocateWells:
        rows: 8
        columns: 8
        wells: E01 down block H02 # H12
        groupBy: cycle
        order: reshuffle
      source=:
        values: [A, B]
        groupBy: wellA
        order: repeat
      subgroup*: [A, B]
      well=calculate: '(subgroup == "A") ? wellA : wellB'
      wellVolume=calculate: '(source == subgroup) ? fullVolume - aliquotVolume : fullVolume'
      aliquotVolume=calculate: '(source == subgroup) ? -aliquotVolume : aliquotVolume'
      id=range:
        orderBy: [cycle]
    orderBy: [cycle]

steps:
  data:
    source: design
  1:
    command: pipetter.cleanTips
    equipment: ourlab.mario.liha
    intensity: thorough
  2:
    data: {where: 'cycle == 1'}
    command: experiment.forEachGroup # HACK: remove this repeat later
    groupBy: fullVolume
    steps:
      1:
        description: "Fill the first source wells"
        data: {where: 'source == subgroup'}
        command: pipetter.pipette
        sources: dyeLight
        destinationLabware: plate1
        destinations: $$well
        volumes: $fullVolume
        clean: flush
      2:
        description: "Fill the first destination wells"
        command: pipetter.pipette
        sources: dyeLight
        destinationLabware: plate1
        destinations:
          "#data":
            where: 'source != subgroup'
            value: well
        volumes:
          "#data":
            where: 'source == subgroup'
            value: wellVolume
        clean: flush
      3:
        description: "Shake plate1"
        command: shaker.shakePlate
        object: plate1
        program:
          duration: 1 minute
        destinationAfter: stay
      4:
        description: "Measure absorbance"
        command: absorbanceReader.measurePlate
        object: plate1
        program:
          excitationWavelength: 480nm
          wellDesignFactor: well
          userValues: {cycle: 0}
        outputDataset: "absorbance"
        destinationAfter: $site
  3:
    description: "Process cycles"
    command: experiment.forEachGroup
    groupBy: cycle
    steps:
      description: "`Cycle {{$cycle}}`"
      1:
        description: "Transfer from source wells to destination wells"
        command: pipetter.pipette
        sourceLabware: plate1
        sources:
          "#data":
            where: 'source == subgroup'
            value: well
        destinationLabware: plate1
        items:
          "#data":
            where: 'source != subgroup'
            template:
              destination: $well
              volume: $aliquotVolume
              syringe: $syringe
              program: $liquidClass
        clean: flush
      2:
        description: "Shake plate1"
        command: shaker.shakePlate
        object: plate1
        program:
          duration: 1 minute
        destinationAfter: stay
      3:
        description: "Measure absorbance"
        command: absorbanceReader.measurePlate
        object: plate1
        program:
          excitationWavelength: 480nm
          wellDesignFactor: well
        outputDataset: "absorbance"
        destinationAfter: $site
