States:
	destination well: Seq of (SrcLiquid,Volume)
	source well: volume
	tip: liquid, volume, contamination, pending cleaning degree
	----
	a simplified state could just consist of the number of completed destination wells and a map of wells requiring more volume due to tips not being able to hold full volume required

Actions:
aspirate
dispense
clean
replace tips

selection of actions:
pick left-most top-most destination wells; we will create sets of the first one, the first two, the first three, etc.
for each destination set, find all tip configurations which could access them
for each tip configuration, find the best source wells



Possible approach #1:
	order the destination wells in the order in which they must be processed
	if destinations occur multiple times, the ordering is repeated, taking a new source each time
	place pipetting items in order of dispense
	somehow use smaller tips when necessary
	let every cycle intelligently switch tips:
		
Possible approach #2:
	map all items to (src, dest, vol, tipTypesAllowed)
	for each tip group
		get next (src, dest, vol) list that this group can handle
		keep track of commands and score

Possible approach #3:
	set it up as a dynamic programming problem
	for each tip group, order the items
	find the unique orderings and associate the correct tip groups with each ordering
	now we have n states, where n is the number of items
	for each ordering:
		frontier = {0}
		while !frontier.isEmpty:
			iDestStart = frontier.pop
			for each tip group:
				get next items that this group can handle
				skip if items list is empty
				create actions for the items
				iDestEnd = iDestStart + items.size
				costStep = cost of actions
				cost = costs(iDestStart) + costStep
				if (costs(iDestEnd) > cost) {
					actionsCheapest(iDestStart) = actons
					cost(iDestEnd) = cost
					frontier += iDestEnd
				}
			frontier -= iDestStart



	For each source, determine the allowable and prefered tip types, or alternatively the distinct required tip types
	getNextItems() should get as many columns of tips as can be simultaneously pipetted



Notes:
	choosing tip type per source:
		sometimes a particular tip type may be required by some items and allowed by all, so use that tip type
		sometimes distinct tip types may be required by different items: so choose on a case-by-case basis
		otherwise list all allowable tips
	map all items to (src, dest, vol, tipTypesAllowed)
	find range of t

PROBLEM:
	need to pick tip type for each source

New information for pipette items:
	a special item to signify a new layer
	within a layer, destination order can be rearranged
	but items cannot be moved between layers
	also, each layer decides anew about tip types per source

Possible approach #4:
	if force pre wash:
		set simulated tip states to clean
	else
		set simulated tip states to actual tip states

	for each layer:
		if there are one or more tip types which can be used by all items in layer:
			choose the preferred one
			map items to selected type
		otherwise:
			ERROR, for now, because I'm not sure what to do
			do:
				find most frequently allowed tip type and assign it to all allowable items
			loop while (there are still unassigned items)

			// NOTE: what is done now could vary by robot.
			// For our robot, we'll pipette one tip type at a time
			do:
				get next tip type among waiting items
				get all items using that tip type
				pipette those items
			loop while (there are unfinished items)
	
	if force post wash
		wash all tips

	def pipette(tip type, items) {
		get next tip which can be used with this item/tiptype
		if no tips can be used with this item
			if there are dirty tips
				clean the tips according to their cleaning degree they need
				try again
			else
				ERROR

		while 
	}

	def pipetteBatch(batch, tip type, item): Result[Option[Batch]] = {
		get next tip which can be used with this item/tiptype
		if no tips can be used with this item
			if there are dirty tips
				clean the tips according to their cleaning degree they need
				try again
			else
				ERROR
		
	}

Possible approach #5: (dynamic programming again)
	item
	(item, tiptype)

	createBatches: possible breaking conditions:
		tip group change
		plate change
		column change
		contiguous well change
		tip type change?

	for iItem = 0 until item.size:
		get current tip states for this item
		nItemsA = getMaxNumberOfItems(using current tip states)
		nItemsB = getMaxNumberOfItems(using clean tip states)
	
	processItems([(item, tiptype)], tipStates, iItem) {
		nItems = getMaxNumberOfItems(tipStates)
		for (n <- 0 until nItems) {
			createBatch(items, tipStates, iItem, nItems).foreach(batch => addToList(batch))
		}
	}
	
	addToList(iItem0, batch) {
		iItem1 = iItem0 + batch.size
		nCostPrev = list.get(iItem1).map(_.nCost).getOrElse(Double.MAX)
		if (batch.nCost < nCostPrev) {
			list[iItem1] = batch
			add iItem1 to waiting queue
		}
	}

	createBatch(tipStates, iItem0, items, nItems) {
		get next tip which can be used with this item/tiptype
		if no tips can be used with this item
			return None
		
	}

	(batch, item, tiptype, tip)

	
	pipetteBatch(batch, item, tiptype)
		if batch is empty
			assume all tips are clean
			add item to batch
		else if (item's aspriate plate and dispense plate are both different than the batch's)
			return DONE
		else {
			get next tip which can be used with this item/tiptype
			if no tips can be used with this item

		}

Figuring out tip assignment for [(item, tiptype)] using propositional logic: 
	D#_i = destination well# for dispense i
	L#_i = source liquid# for dispense i
	V_i = volume for dispense i
	T_i = tip for dispense i
	
	T#_i = use tip# for dispense i
	T#L# = tip# used for liquid#
	T#_i => T#L(# <- L#_i)

	L0 = water (doesn't trigger need to clean)

	Statements for distributing L1 to wells 0-3
	D0_0
	D1_1
	D2_2
	D3_3
	L1_0
	L1_1
	L1_2
	L1_3

	Prevent tip from holding multiple liquids (assume we have 2 liquids, even though we only used one above):
	For all t in tips:
	TtL1 => !TtL2
	TtL2 => !TtL1
	
	Assume 2 tips and each item can use either tip:
	T0_0 | T1_0
	T0_1 | T1_1
	T0_2 | T1_2
	T0_3 | T1_3

	When tip is assigned to item, assign liquid to tip
	T0_0 => T0L1
	Tt_i => TtL[liquid for item]

	
Consider the following scenario:
	Assume we have two tips
	L1->D1
	L1->D2
	L2->D1
	L2->D2

	T0_0 | T1_0
	T0_0 => T0L1
	T1_0 => T1L1
	T0L1 | T1L1 => OK_1

	T0_1 | T1_1
	T0_1 => T0L1
	T1_1 => T1L1
	OK_1 & (T0_1 | T1_1) => OK_2

	T0_2 | T1_2
	T0_2 => T0L2
	T1_2 => T1L2

	T0_3 | T1_3
	T0_3 => T0L2
	T1_3 => T1L2

	T0L1 => !T0L2
	T0L2 => !T0L1
	T1L1 => !T1L2
	T1L2 => !T1L1



	two tips
	two liquids
	two destination wells
	each destination well should get liquid #1 then liquid #2

	We want to achieve the following:
		tip#1 takes liquid#1
		tip#2 takes liquid#2
		tip#1 dispenses in D1 then D2
		tip#2 dispenses in D1 then D2
	Instead of:
		tip#1 takes liquid#1
		tip#2 takes liquid#1
		tip#1+2 dipense in D1 and D2
		then repeat for liquid#2

Easy method for checking whether items can be accommodated by our tips:
	number of tips per tip type
	for each liquid:
		see how many tips of the given tip type would be required for the given items
	check whether our tips can accommodate the requires number of tips per tip type

How to assign tips to items:
	for each liquid:
		reserve minimum number of required tip of assigned tip type
		find maximum number of adjacent destination wells for this liquid
	for each tip type:
		while any extra tips of that type are available:
			create map per liquid of adjecent wells - number of tips assigned
			get liquid type with maximum number of adjacent wells
			if that number is <= 0, stop
			increment number of tips assigned to liquid
			decrement entry in map for liquid
			decrement number of free tips of this type
	for each liquid:
		assign chosen number of tips of required type to this liquid
	for each item:
		...
