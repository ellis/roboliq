digraph Roboliq {
	//Parser [ shape="Mrecord" ];
	//Evaluator [ shape="Mrecord" ];
	//JSON -> Parser -> Rjs -> Evaluator;

	node [ shape="note" ];

	GenericProtocol;
	Alternatives0 [ shape="record", label="{PlanningAlternatives|Task Methods|...|...|Variables|Order|...|}", style="dashed,filled", fillcolor="#ffdddd" ];
	EvowareConfig0 [ label="EvowareConfig", style="dashed,filled", fillcolor="#ddddff" ];

	EvowareConfigProcessor [ shape="Mrecord" ];
	ProtocolProcessor [ shape="Mrecord" ];
	AssistedPlanner [ shape="Mrecord" ];

	ProtocolMerger [ shape="Mrecord" ];

	GenericProtocol -> ProtocolProcessor -> GenericProtocolData;
	GenericProtocolData -> ProtocolMerger [ label="1" ];
	EvowareConfig0 -> EvowareConfigProcessor -> LabProtocolData;
	LabProtocolData -> ProtocolMerger [ label="2" ];
	AutomatedProtocolData -> ProtocolMerger [ label="3" ];
	Alternatives0 -> AssistedPlanner;
	AssistedPlanner -> AutomatedProtocolData [ dir="both" ];
	AssistedPlanner -> UserProtocolData [ dir="both" ];
	UserProtocolData -> ProtocolMerger [ label="4" ];

	GenericProtocolData -> LabProtocolData -> AutomatedProtocolData -> UserProtocolData [ style="invis" ];
	{ rank=same GenericProtocolData LabProtocolData AutomatedProtocolData UserProtocolData };

	ProtocolData0 [ shape="record", label="{ProtocolData #1|{Logic|Commands|Settings}}", style="filled", fillcolor="#ddffdd" ];

	ProtocolMerger -> ProtocolData0;

	CheckTasks [ shape="diamond", label="Tasks?", width=2 ];
	ProtocolData0 -> CheckTasks;
	FindMethods [ shape="Mrecord" ];
	CheckTasks -> FindMethods [ label="incomplete" ];
	TaskAlternatives [ style="dashed,filled", fillcolor="#ffdddd" ];
	FindMethods -> TaskAlternatives [ label="list alternative methods" ];
	{ rank=same CheckTasks FindMethods TaskAlternatives };

	CheckMethods [ shape="diamond", label="Methods?", width=2 ];
	CheckTasks -> CheckMethods;
	ExpandMethods [ shape="Mrecord" ];
	CheckMethods -> ExpandMethods [ label="incomplete" ];
	AlternativesX [ label="AutomatedProtocolData" style="dashed,filled", fillcolor="#ffdddd" ];
	ExpandMethods -> AlternativesX [ label="expand methods to list of actions" ];
	{ rank=same CheckMethods ExpandMethods AlternativesX };
	
	CheckPlan [ shape="diamond", label="Plan?", width=2 ];
	CheckMethods -> CheckPlan;
	PlanActions [ shape="Mrecord" ];
	CheckPlan -> PlanActions [ label="incomplete" ];
	{ rank=same CheckPlan PlanActions };

	CheckVariables [ shape="diamond", label="Variables?", width=2 ];
	CheckPlan -> CheckVariables;
	FindValues [ shape="Mrecord" ];
	CheckVariables -> FindValues [ label="incomplete" ];
	VariableAlternatives [ style="dashed,filled", fillcolor="#ffdddd" ];
	FindValues -> VariableAlternatives [ label="list alternative values" ];
	{ rank=same CheckVariables FindValues VariableAlternatives };

	CheckActions [ shape="diamond", label="Actions?", width=2 ];
	CheckVariables -> CheckActions;
	HandleActions [ shape="Mrecord" ];
	CheckActions -> HandleActions [ label="incomplete" ];
	ActionCommands [ style="dashed,filled", fillcolor="#ffdddd" ];
	HandleActions -> ActionCommands [ label="expand actions" ];
	{ rank=same CheckActions HandleActions ActionCommands };

	EvowareCompiler [ shape="Mrecord" ];
	CheckActions -> EvowareCompiler;
	EvowareCompiler -> EvowareScript;
	EvowareConfig1 [ label="EvowareConfig", style="dashed,filled", fillcolor="#ddddff" ];
	EvowareConfig1 -> EvowareCompiler;
	{ rank=same EvowareCompiler EvowareConfig1 };




	subgraph cluster_2 {
		label = "Action Planning";

		ProtocolData1 [ shape="record", label="{ProtocolData #2|{Logic|Commands|Settings}}", style="filled", fillcolor="#ddffdd" ];
		ProtocolData1 -> Split1;
		Split1 [ shape="point" ];
		LogicCompiler [ shape="Mrecord" ];
		PartialOrderPlanner [ shape="Mrecord" ];
		PlanChecker [ shape="Mrecord" ];
		PlanIntegrator [ shape="Mrecord" ];
		Alternatives2 [ shape="note", label="PlanningAlternatives", style="filled", fillcolor="#ffdddd" ];
		CheckPoint2 [ label="", shape="diamond", width=0.2, height=0.2, fixedsize=true ];

		Split1 -> LogicCompiler;
		LogicCompiler -> PDDL -> PartialOrderPlanner -> PartialOrderPlan;
		PartialOrderPlan -> CheckPoint2 [ arrowhead="none" ];

		CheckPoint2 -> PlanChecker [ arrowhead="none" ];
		PlanChecker -> Alternatives2 [ label=" missing " ];
		CheckPoint2 -> PlanIntegrator;
		Split1 -> PlanIntegrator;

		{ rank=same Split1 LogicCompiler };
		{ rank=same CheckPoint2 PlanChecker Alternatives2 };
	};

	PlanIntegrator -> ProtocolData3 [ label=" add complete list of planned actions and parameters" ];
}
