- General overview
	- Overview of project
	- What the robot can do now
	- What you will probably be able to do in the near future
	- More distant future
- Discussion about the DSL
	- show code for something really simple
	- show code for PCR
- Technicalities of pipetting algorithm
	-
- Something technical where suggestions might be useful or where the info might be useful for others
	Trade-off: force separation between generic and specialized protocols?
- Some open problem
	- design of the DSL
		- show code for PCR
		- show code for gradient


Language format:

val water = new Liquid(Properties.Water, CleanPolicy.ThoroughNone)
val wells = new Plate

protocol {
  pipette(water, plate, 30 ul)
}

customize {
  water.liquidClass = "D-BSSE Water"
  plate.location = "P1"
  val p2 = new Plate(nRows = 8, nCols = 1, location = "P2")
  p2.well(1).liquid = water
}
-------------------

// Plates
val plateA = new Plate

// Programs for external devices
val pcrMixProgram = new PcrMixProgram
val thermocycleProgram = new ThermocycleProgram
val centrifugeProgram = new CentrifugeProgram

// Instructions
plateA(B5+2) send through {
	pcrMix(pcrMixProgram)
	seal
	thermocycle(thermocycleProgram)
	centrifuge(centrifugeProgram)
	peel
}

pcrMix(plateA(B5+2), pcrMixProgram)
seal(plateA)
thermocycle(plateA, thermocycleProgram)
centrifuge(plateA, centrifugeProgram)
peel(plateA)

//------------------------------------
// Setup for a specific robot

reagents {
	water      at Labwares.reagents50(1)
	buffer10x  in Labwares.eppendorfs(A1)
	dNPT       in Labwares.eppendorfs(B1)
	primerF    in Labwares.eppendorfs(A2)
	primerB    in Labwares.eppendorfs(B2)
	polymerase in Labwares.eppendorfs(C2)
}

plates {
	plateA at Sites.cooled2 model LabwareModels.platePcr
	plateB at Sites.cooled1 model LabwareModels.platePcr
}

pcrMixProgram.

thermocycleProgram.dir = 0
thermocycleProgram.program = 2

centrifugeProgram.speed = 2000
centrifugeProgram.??? = "15,9,9,20"

	mixItems,
	diluter = water,
	volume = 50 ul,
	masterMix)

===================================================
= Non-separated script
===================================================

// Reagents
water at Labwares.reagents50(1)

// Plates
val plateA = new Plate at Sites.cooled2 model LabwareModels.platePcr
val plateB = new Plate at Sites.cooled1 model LabwareModels.platePcr

// Programs for external devices
val pcrMixProgram = new PcrMixProgram {
	buffer     at Labwares.eppendorfs(A1) conc0(10 x)  conc1(1 x)
	dNPT       at Labwares.eppendorfs(B1) conc0(2 uM)  conc1(.2 uM)
	primerF    at Labwares.eppendorfs(A2) conc0(50 uM) conc1(.5 uM)
	primerB    at Labwares.eppendorfs(B2) conc0(50 uM) conc1(.5 uM)
	polymerase at Labwares.eppendorfs(C2) conc0(5)     conc1(0.01)
	template ...???
	volumePerWell = 50 ul
	masterMixWells = Labwares.eppendorfs(D2)
}
val thermocycleProgram = new ThermocycleProgram(0, 2)
val centrifugeProgram = new CentrifugeProgram(2000, 15, 9, 20, plateB)

// Instructions
pcrMixProgram(plateA(B5+2))
seal(plateA)
thermocycleProgram(plateA)
centrifugeProgram(plateA)
peel(plateA)

                MixItemTemplateL4(well_template, Seq(20), 0.2)

===================================================
= Separated script
===================================================

// Liquids
val water      = new Liquid(Properties.Water, CleanPolicy.ThoroughNone)
val buffer10x  = new Liquid(Properties.Water, CleanPolicy.Thorough)
val dNTP       = new Liquid(Properties.Water, CleanPolicy.Thorough)
val primerF    = new Liquid(Properties.Water, CleanPolicy.Decontaminate, Contaminant.DNA)
val primerR    = new Liquid(Properties.Water, CleanPolicy.Decontaminate, Contaminant.DNA)
val polymerase = new Liquid(Properties.Glycerol, CleanPolicy.Thorough)

// Wells
val wellsT = new Wells      // wells containing DNA template
val wellsP = new EmptyWells // wells for the PCR reaction
val wellsB = new EmptyWells // balance wells for centrifugation

// Programs for external devices
val pcrMixProgram = new PcrMixProgram(
	buffer     = buffer10x,
	dNTP       = dNTP,
	primerF    = primerF,
	primerR    = primerR,
	polymerase = polymerase
)
val thermocycleProgram = new ThermocycleProgram
val centrifugeProgram = new CentrifugeProgram

// Instructions
pcrMixProgram(source = wellsT, target = wellsP)
balance(reference = wellsP, target = wellsB, liquid = water)
seal(wellsP, wellsB)
thermocycleProgram(wellsP)
centrifugeProgram(wellsP, balance = wellsB)

//----------------------------------


                MixItemTemplateL4(well_template, Seq(20), 0.2)


===================================================
= Non-separated script
===================================================

// Liquids
val water      = new Liquid(Properties.Water, CleanPolicy.ThoroughNone) at Labwares.reagents50(1)
val buffer10x  = new Liquid(Properties.Water, CleanPolicy.Thorough) at Labwares.eppendorfs(A1)
val dNTP       = new Liquid(Properties.Water, CleanPolicy.Thorough)
val primerF    = new Liquid(Properties.Water, CleanPolicy.Decontaminate, Contaminant.DNA)
val primerB    = new Liquid(Properties.Water, CleanPolicy.Decontaminate, Contaminant.DNA)
val polymerase = new Liquid(Properties.Glycerol, CleanPolicy.Thorough)

// Plates
val plateA = new Plate at Sites.cooled2 model LabwareModels.platePcr
val plateB = new Plate at Sites.cooled1 model LabwareModels.platePcr

// Programs for external devices
val pcrMixProgram = new PcrMixProgram {
	buffer     = buffer10x initial(10 x)  final(1 x)
	dNPT       = dNTP at Labwares.eppendorfs(B1) conc0(2 uM)  conc1(.2 uM)
	primerF    at Labwares.eppendorfs(A2) conc0(50 uM) conc1(.5 uM)
	primerB    at Labwares.eppendorfs(B2) conc0(50 uM) conc1(.5 uM)
	polymerase at Labwares.eppendorfs(C2) conc0(5)     conc1(0.01)
	template ...???
	volumePerWell = 50 ul
	masterMixWells = Labwares.eppendorfs(D2)
}
val thermocycleProgram = new ThermocycleProgram(0, 2)
val centrifugeProgram = new CentrifugeProgram(2000, 15, 9, 20, plateB)

// Instructions
pcrMixProgram(plateA(B5+2))
seal(plateA)
thermocycleProgram(plateA)
centrifugeProgram(plateA)
peel(plateA)

                MixItemTemplateL4(well_template, Seq(20), 0.2)

===================================================
= Non-separated script with encapsulated protocol
===================================================

class PcrProgram {
	// Liquids
	val water      = new Liquid(Properties.Water, CleanPolicy.ThoroughNone) at Labwares.reagents50(1)
	val buffer10x  = new Liquid(Properties.Water, CleanPolicy.Thorough) at Labwares.eppendorfs(A1)
	val dNTP       = new Liquid(Properties.Water, CleanPolicy.Thorough)
	val primerF    = new Liquid(Properties.Water, CleanPolicy.Decontaminate, Contaminant.DNA)
	val primerB    = new Liquid(Properties.Water, CleanPolicy.Decontaminate, Contaminant.DNA)
	val polymerase = new Liquid(Properties.Glycerol, CleanPolicy.Thorough)

	// Programs for external devices
	val pcrMixProgram = new PcrMixProgram {
		buffer     = buffer10x initial(10 x)  final(1 x)
		dNPT       = dNTP at Labwares.eppendorfs(B1) conc0(2 uM)  conc1(.2 uM)
		primerF    at Labwares.eppendorfs(A2) conc0(50 uM) conc1(.5 uM)
		primerB    at Labwares.eppendorfs(B2) conc0(50 uM) conc1(.5 uM)
		polymerase at Labwares.eppendorfs(C2) conc0(5)     conc1(0.01)
		template ...???
		volumePerWell = 50 ul
		masterMixWells = Labwares.eppendorfs(D2)
	}
	val thermocycleProgram = new ThermocycleProgram(0, 2)
	val centrifugeProgram = new CentrifugeProgram(2000, 15, 9, 20, plateB)

	def run(wells: Wells) {
		// Instructions
		pcrMixProgram(wells)
		seal(wells)
		thermocycleProgram(wells)
		centrifugeProgram(wells)
		peel(wells)
	}

		MixItemTemplateL4(well_template, Seq(20), 0.2)
}

// Plates
val plateA = new Plate at Sites.cooled2 model LabwareModels.platePcr
val plateB = new Plate at Sites.cooled1 model LabwareModels.platePcr

val pcrProgram = new PcrProgram

pcrProgram(platA(B5+2))

-----------------------------

Free formulation:

state: S
item: I, I_s (items pending from state s)
tipModel: M
syringe: Y
syringeBlock: B
source: C
liquid: L

M_b = set of tipModels which can be assigned to syringBlock b
m_b = model assigned to syringeBlock b

Each item is a tuple (liquid, dest, vol)
Partial ordering of items (i < j)
 item_i < item_j if item_i.dest == item_j.dest || item_i.dest == item_j.src

State: 
  bit string of length n_i, 1 for done, 0 for pending
  n to 2^n_i states (total ordering to no ordering)
  Initial state: all 0s
  Goal state: all 1s

Actions:
  may cover:
    all subsets of pending items (2^|I_s|)
    all permutations of items in subset (|I_s|!)
    all partitions among syringes (|S|^|I_s|)

Actions:
  {item} <- I_s = subset of pending items (2^|Is|) such that
    - |{item.src.liquid}| <= |Y| (not more liquids than syringes)
  [item] <- permutations of {item} (|{item}|!)
    - which respect the partial ordering
  [l_i] = [item.src.liquid]
  [m_b] <- [M_b] = assignments of tipModels to syringeBlocks (prod_b |M_b|)
  [[item]_y] <- partitioning of items among syringes such that (|Y|^|[item]|)
    - the [item]_y are compatible with m_y
    - syringe y can hold sum_i(item_y,i.vol)
    - syringe y would not have to be washed before dispensing to [item]_y.tail
  [src_y] <- {l_y.src} (prod_y |l_y.src|)
  action = ...

---- again ----



Heuristic cost functions:
  number of cycles = ceil(number of tips required (for each liquid group) / number or syringes)
  number of aspirates = number of cycles
  number of dispenses = ceil(number of items / number of syringes)
  number of cleans = ?
 

----
Current formulation:

use existing order of items
assign a tip model to each item

State: (n, l_y, m_y)
Action: ([clean_y], [(src_y, aspvol_y)], [(dest_y, destvol_y)])
  item = next pending item
  liquid = item.src.liquid
  {l} += liquid
  {m} += getTipModel(liquid)
  check that {m} can be assigned to available syringeBlocks
  add item.volume to aspiration volume for liquid and calculate number of syringes required
  assign tips to the liquids (O(|{l}|*|Y|+|[item]|))
  assign tips to items 

  [[item]_y]
  [item] <- pending items from length 1 while
    - |{item.src.liquid}| <= |Y| (not more liquids than syringe count unless cleaning is suppressed) (<= |I_s|)
  [l_i] = [item.src.liquid]
  [m_b] <- [M_b] = assignments of tipModels to syringeBlocks (prod_b |M_b|)
  [[item]_y] <- partitioning of items among syringes such that (|Y|^|[item]|)
    - the [item]_y are compatible with m_y
    - syringe y can hold sum_i(item_y,i.vol)
    - syringe y would not have to be washed before dispensing to [item]_y.tail
  [src_y] <- {l_y.src} (prod_y |l_y.src|)
  action = ...



----
ways to order the items:
vertical first
horizontal first
vertical first, but in wide blocks of height equal to tip block height

----
Example of scenario where the algorithm would perform very poorly:

